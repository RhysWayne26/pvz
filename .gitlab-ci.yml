image: golang:1.24

stages:
  - lint
  - security
  - build
  - test

variables:
  GO111MODULE: "on"
  GOPROXY: "https://proxy.golang.org,direct"

cache:
  paths:
    - .cache/go-mod/

before_script:
  - apt-get update && apt-get install -y unzip curl
  - cd pvz
  - export GOMODCACHE="$CI_PROJECT_DIR/.cache/go-mod"
  - go mod download
  - go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.1.6
  - go install github.com/securego/gosec/v2/cmd/gosec@v2.22.4

lint:
  stage: lint
  allow_failure: false
  only:
    - merge_requests
    - master
  script:
    - make lint
  artifacts:
    when: on_failure
    expire_in: 1 hour
    reports:
      dotenv: .golangci-report.env

security:
  stage: security
  only:
    - merge_requests
    - master
  allow_failure: false
  script:
    - make security

build:
  stage: build
  needs: [lint, security]
  only:
    - merge_requests
    - master
  script:
    - make build
  artifacts:
    paths:
      - pvz/pvz
    expire_in: 1 day

migrate-test:
  stage: test
  image: docker:24.0.7-cli
  only:
    - merge_requests
    - master
  services:
    - name: docker:dind
      alias: docker
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - apk add --no-cache make curl unzip bash
    - cd pvz
    - echo "STORAGE_MODE=db" > .env
    - echo "POSTGRES_DB=${POSTGRES_DB}" >> .env
    - echo "POSTGRES_USER=${POSTGRES_USER}" >> .env
    - echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" >> .env
    - echo "REPLICATION_USER=${REPLICATION_USER}" >> .env
    - echo "REPLICATION_PASSWORD=${REPLICATION_PASSWORD}" >> .env
    - echo "DB_WRITE_DSN=${DB_WRITE_DSN}" >> .env
    - echo "DB_READ_DSN=${DB_READ_DSN}" >> .env

    - docker compose up -d postgres-master postgres-slave
    - |
      timeout=30
      until docker compose exec -T postgres-master \
            pg_isready -U "${POSTGRES_USER}" -d "${POSTGRES_DB}"; do
        echo "Waiting for masterâ€¦ ($timeout)s left"
        sleep 1
        timeout=$((timeout-1))
        [ $timeout -le 0 ] && { echo "Timeout waiting for master"; exit 1; }
      done

  script:
    - make tools/install
    - make migrate-up
    - make migrate-status

  after_script:
    - docker compose down -v