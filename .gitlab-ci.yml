image: golang:1.24

stages:
  - lint
  - security
  - build
  - test

variables:
  GO111MODULE: "on"
  GOPROXY: "https://proxy.golang.org,direct"

cache:
  paths:
    - .cache/go-mod/

before_script:
  - apt-get update && apt-get install -y unzip curl
  - cd pvz
  - export GOMODCACHE="$CI_PROJECT_DIR/.cache/go-mod"
  - go mod download
  - go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.1.6
  - go install github.com/securego/gosec/v2/cmd/gosec@v2.22.4

lint:
  stage: lint
  allow_failure: false
  only:
    - merge_requests
    - master
  script:
    - make lint
  artifacts:
    when: on_failure
    expire_in: 1 hour
    reports:
      dotenv: .golangci-report.env

security:
  stage: security
  only:
    - merge_requests
    - master
  allow_failure: false
  script:
    - make security

build:
  stage: build
  needs: [lint, security]
  only:
    - merge_requests
    - master
  script:
    - make build
  artifacts:
    paths:
      - pvz/pvz
    expire_in: 1 day

migrate-test:
  stage: test
  only:
    - merge_requests
    - master
  services:
    - name: postgres:15-alpine
  before_script:
    - apk add --no-cache bash make curl unzip postgresql-client
    - cd pvz
    - echo "STORAGE_MODE=db" > .env
    - echo "POSTGRES_DB=${POSTGRES_DB}" >> .env
    - echo "POSTGRES_USER=${POSTGRES_USER}" >> .env
    - echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" >> .env
    - echo "DB_WRITE_DSN=${DB_DSN}" >> .env
    - |
      echo "waiting for Postgres..."
      timeout=30
      until pg_isready -h postgres -U "$POSTGRES_USER" -d "$POSTGRES_DB"; do
        echo "  still waitingâ€¦ ($timeout)"
        sleep 1
        timeout=$((timeout-1))
        [ $timeout -le 0 ] && { echo "Timeout waiting for master"; exit 1; }
      done
  script:
    - make tools/install
    - make migrate-up
    - make migrate-status