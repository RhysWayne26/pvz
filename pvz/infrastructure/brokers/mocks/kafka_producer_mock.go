// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// KafkaProducerMock implements mm_brokers.KafkaProducer
type KafkaProducerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcClose          func() (err error)
	funcCloseOrigin    string
	inspectFuncClose   func()
	afterCloseCounter  uint64
	beforeCloseCounter uint64
	CloseMock          mKafkaProducerMockClose

	funcSend          func(ctx context.Context, topic string, payload []byte) (err error)
	funcSendOrigin    string
	inspectFuncSend   func(ctx context.Context, topic string, payload []byte)
	afterSendCounter  uint64
	beforeSendCounter uint64
	SendMock          mKafkaProducerMockSend

	funcSendWithKey          func(ctx context.Context, topic string, key []byte, payload []byte) (err error)
	funcSendWithKeyOrigin    string
	inspectFuncSendWithKey   func(ctx context.Context, topic string, key []byte, payload []byte)
	afterSendWithKeyCounter  uint64
	beforeSendWithKeyCounter uint64
	SendWithKeyMock          mKafkaProducerMockSendWithKey
}

// NewKafkaProducerMock returns a mock for mm_brokers.KafkaProducer
func NewKafkaProducerMock(t minimock.Tester) *KafkaProducerMock {
	m := &KafkaProducerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CloseMock = mKafkaProducerMockClose{mock: m}

	m.SendMock = mKafkaProducerMockSend{mock: m}
	m.SendMock.callArgs = []*KafkaProducerMockSendParams{}

	m.SendWithKeyMock = mKafkaProducerMockSendWithKey{mock: m}
	m.SendWithKeyMock.callArgs = []*KafkaProducerMockSendWithKeyParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mKafkaProducerMockClose struct {
	optional           bool
	mock               *KafkaProducerMock
	defaultExpectation *KafkaProducerMockCloseExpectation
	expectations       []*KafkaProducerMockCloseExpectation

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// KafkaProducerMockCloseExpectation specifies expectation struct of the KafkaProducer.Close
type KafkaProducerMockCloseExpectation struct {
	mock *KafkaProducerMock

	results      *KafkaProducerMockCloseResults
	returnOrigin string
	Counter      uint64
}

// KafkaProducerMockCloseResults contains results of the KafkaProducer.Close
type KafkaProducerMockCloseResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmClose *mKafkaProducerMockClose) Optional() *mKafkaProducerMockClose {
	mmClose.optional = true
	return mmClose
}

// Expect sets up expected params for KafkaProducer.Close
func (mmClose *mKafkaProducerMockClose) Expect() *mKafkaProducerMockClose {
	if mmClose.mock.funcClose != nil {
		mmClose.mock.t.Fatalf("KafkaProducerMock.Close mock is already set by Set")
	}

	if mmClose.defaultExpectation == nil {
		mmClose.defaultExpectation = &KafkaProducerMockCloseExpectation{}
	}

	return mmClose
}

// Inspect accepts an inspector function that has same arguments as the KafkaProducer.Close
func (mmClose *mKafkaProducerMockClose) Inspect(f func()) *mKafkaProducerMockClose {
	if mmClose.mock.inspectFuncClose != nil {
		mmClose.mock.t.Fatalf("Inspect function is already set for KafkaProducerMock.Close")
	}

	mmClose.mock.inspectFuncClose = f

	return mmClose
}

// Return sets up results that will be returned by KafkaProducer.Close
func (mmClose *mKafkaProducerMockClose) Return(err error) *KafkaProducerMock {
	if mmClose.mock.funcClose != nil {
		mmClose.mock.t.Fatalf("KafkaProducerMock.Close mock is already set by Set")
	}

	if mmClose.defaultExpectation == nil {
		mmClose.defaultExpectation = &KafkaProducerMockCloseExpectation{mock: mmClose.mock}
	}
	mmClose.defaultExpectation.results = &KafkaProducerMockCloseResults{err}
	mmClose.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmClose.mock
}

// Set uses given function f to mock the KafkaProducer.Close method
func (mmClose *mKafkaProducerMockClose) Set(f func() (err error)) *KafkaProducerMock {
	if mmClose.defaultExpectation != nil {
		mmClose.mock.t.Fatalf("Default expectation is already set for the KafkaProducer.Close method")
	}

	if len(mmClose.expectations) > 0 {
		mmClose.mock.t.Fatalf("Some expectations are already set for the KafkaProducer.Close method")
	}

	mmClose.mock.funcClose = f
	mmClose.mock.funcCloseOrigin = minimock.CallerInfo(1)
	return mmClose.mock
}

// Times sets number of times KafkaProducer.Close should be invoked
func (mmClose *mKafkaProducerMockClose) Times(n uint64) *mKafkaProducerMockClose {
	if n == 0 {
		mmClose.mock.t.Fatalf("Times of KafkaProducerMock.Close mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmClose.expectedInvocations, n)
	mmClose.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmClose
}

func (mmClose *mKafkaProducerMockClose) invocationsDone() bool {
	if len(mmClose.expectations) == 0 && mmClose.defaultExpectation == nil && mmClose.mock.funcClose == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmClose.mock.afterCloseCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmClose.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Close implements mm_brokers.KafkaProducer
func (mmClose *KafkaProducerMock) Close() (err error) {
	mm_atomic.AddUint64(&mmClose.beforeCloseCounter, 1)
	defer mm_atomic.AddUint64(&mmClose.afterCloseCounter, 1)

	mmClose.t.Helper()

	if mmClose.inspectFuncClose != nil {
		mmClose.inspectFuncClose()
	}

	if mmClose.CloseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmClose.CloseMock.defaultExpectation.Counter, 1)

		mm_results := mmClose.CloseMock.defaultExpectation.results
		if mm_results == nil {
			mmClose.t.Fatal("No results are set for the KafkaProducerMock.Close")
		}
		return (*mm_results).err
	}
	if mmClose.funcClose != nil {
		return mmClose.funcClose()
	}
	mmClose.t.Fatalf("Unexpected call to KafkaProducerMock.Close.")
	return
}

// CloseAfterCounter returns a count of finished KafkaProducerMock.Close invocations
func (mmClose *KafkaProducerMock) CloseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmClose.afterCloseCounter)
}

// CloseBeforeCounter returns a count of KafkaProducerMock.Close invocations
func (mmClose *KafkaProducerMock) CloseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmClose.beforeCloseCounter)
}

// MinimockCloseDone returns true if the count of the Close invocations corresponds
// the number of defined expectations
func (m *KafkaProducerMock) MinimockCloseDone() bool {
	if m.CloseMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CloseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CloseMock.invocationsDone()
}

// MinimockCloseInspect logs each unmet expectation
func (m *KafkaProducerMock) MinimockCloseInspect() {
	for _, e := range m.CloseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to KafkaProducerMock.Close")
		}
	}

	afterCloseCounter := mm_atomic.LoadUint64(&m.afterCloseCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CloseMock.defaultExpectation != nil && afterCloseCounter < 1 {
		m.t.Errorf("Expected call to KafkaProducerMock.Close at\n%s", m.CloseMock.defaultExpectation.returnOrigin)
	}
	// if func was set then invocations count should be greater than zero
	if m.funcClose != nil && afterCloseCounter < 1 {
		m.t.Errorf("Expected call to KafkaProducerMock.Close at\n%s", m.funcCloseOrigin)
	}

	if !m.CloseMock.invocationsDone() && afterCloseCounter > 0 {
		m.t.Errorf("Expected %d calls to KafkaProducerMock.Close at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CloseMock.expectedInvocations), m.CloseMock.expectedInvocationsOrigin, afterCloseCounter)
	}
}

type mKafkaProducerMockSend struct {
	optional           bool
	mock               *KafkaProducerMock
	defaultExpectation *KafkaProducerMockSendExpectation
	expectations       []*KafkaProducerMockSendExpectation

	callArgs []*KafkaProducerMockSendParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// KafkaProducerMockSendExpectation specifies expectation struct of the KafkaProducer.Send
type KafkaProducerMockSendExpectation struct {
	mock               *KafkaProducerMock
	params             *KafkaProducerMockSendParams
	paramPtrs          *KafkaProducerMockSendParamPtrs
	expectationOrigins KafkaProducerMockSendExpectationOrigins
	results            *KafkaProducerMockSendResults
	returnOrigin       string
	Counter            uint64
}

// KafkaProducerMockSendParams contains parameters of the KafkaProducer.Send
type KafkaProducerMockSendParams struct {
	ctx     context.Context
	topic   string
	payload []byte
}

// KafkaProducerMockSendParamPtrs contains pointers to parameters of the KafkaProducer.Send
type KafkaProducerMockSendParamPtrs struct {
	ctx     *context.Context
	topic   *string
	payload *[]byte
}

// KafkaProducerMockSendResults contains results of the KafkaProducer.Send
type KafkaProducerMockSendResults struct {
	err error
}

// KafkaProducerMockSendOrigins contains origins of expectations of the KafkaProducer.Send
type KafkaProducerMockSendExpectationOrigins struct {
	origin        string
	originCtx     string
	originTopic   string
	originPayload string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSend *mKafkaProducerMockSend) Optional() *mKafkaProducerMockSend {
	mmSend.optional = true
	return mmSend
}

// Expect sets up expected params for KafkaProducer.Send
func (mmSend *mKafkaProducerMockSend) Expect(ctx context.Context, topic string, payload []byte) *mKafkaProducerMockSend {
	if mmSend.mock.funcSend != nil {
		mmSend.mock.t.Fatalf("KafkaProducerMock.Send mock is already set by Set")
	}

	if mmSend.defaultExpectation == nil {
		mmSend.defaultExpectation = &KafkaProducerMockSendExpectation{}
	}

	if mmSend.defaultExpectation.paramPtrs != nil {
		mmSend.mock.t.Fatalf("KafkaProducerMock.Send mock is already set by ExpectParams functions")
	}

	mmSend.defaultExpectation.params = &KafkaProducerMockSendParams{ctx, topic, payload}
	mmSend.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSend.expectations {
		if minimock.Equal(e.params, mmSend.defaultExpectation.params) {
			mmSend.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSend.defaultExpectation.params)
		}
	}

	return mmSend
}

// ExpectCtxParam1 sets up expected param ctx for KafkaProducer.Send
func (mmSend *mKafkaProducerMockSend) ExpectCtxParam1(ctx context.Context) *mKafkaProducerMockSend {
	if mmSend.mock.funcSend != nil {
		mmSend.mock.t.Fatalf("KafkaProducerMock.Send mock is already set by Set")
	}

	if mmSend.defaultExpectation == nil {
		mmSend.defaultExpectation = &KafkaProducerMockSendExpectation{}
	}

	if mmSend.defaultExpectation.params != nil {
		mmSend.mock.t.Fatalf("KafkaProducerMock.Send mock is already set by Expect")
	}

	if mmSend.defaultExpectation.paramPtrs == nil {
		mmSend.defaultExpectation.paramPtrs = &KafkaProducerMockSendParamPtrs{}
	}
	mmSend.defaultExpectation.paramPtrs.ctx = &ctx
	mmSend.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmSend
}

// ExpectTopicParam2 sets up expected param topic for KafkaProducer.Send
func (mmSend *mKafkaProducerMockSend) ExpectTopicParam2(topic string) *mKafkaProducerMockSend {
	if mmSend.mock.funcSend != nil {
		mmSend.mock.t.Fatalf("KafkaProducerMock.Send mock is already set by Set")
	}

	if mmSend.defaultExpectation == nil {
		mmSend.defaultExpectation = &KafkaProducerMockSendExpectation{}
	}

	if mmSend.defaultExpectation.params != nil {
		mmSend.mock.t.Fatalf("KafkaProducerMock.Send mock is already set by Expect")
	}

	if mmSend.defaultExpectation.paramPtrs == nil {
		mmSend.defaultExpectation.paramPtrs = &KafkaProducerMockSendParamPtrs{}
	}
	mmSend.defaultExpectation.paramPtrs.topic = &topic
	mmSend.defaultExpectation.expectationOrigins.originTopic = minimock.CallerInfo(1)

	return mmSend
}

// ExpectPayloadParam3 sets up expected param payload for KafkaProducer.Send
func (mmSend *mKafkaProducerMockSend) ExpectPayloadParam3(payload []byte) *mKafkaProducerMockSend {
	if mmSend.mock.funcSend != nil {
		mmSend.mock.t.Fatalf("KafkaProducerMock.Send mock is already set by Set")
	}

	if mmSend.defaultExpectation == nil {
		mmSend.defaultExpectation = &KafkaProducerMockSendExpectation{}
	}

	if mmSend.defaultExpectation.params != nil {
		mmSend.mock.t.Fatalf("KafkaProducerMock.Send mock is already set by Expect")
	}

	if mmSend.defaultExpectation.paramPtrs == nil {
		mmSend.defaultExpectation.paramPtrs = &KafkaProducerMockSendParamPtrs{}
	}
	mmSend.defaultExpectation.paramPtrs.payload = &payload
	mmSend.defaultExpectation.expectationOrigins.originPayload = minimock.CallerInfo(1)

	return mmSend
}

// Inspect accepts an inspector function that has same arguments as the KafkaProducer.Send
func (mmSend *mKafkaProducerMockSend) Inspect(f func(ctx context.Context, topic string, payload []byte)) *mKafkaProducerMockSend {
	if mmSend.mock.inspectFuncSend != nil {
		mmSend.mock.t.Fatalf("Inspect function is already set for KafkaProducerMock.Send")
	}

	mmSend.mock.inspectFuncSend = f

	return mmSend
}

// Return sets up results that will be returned by KafkaProducer.Send
func (mmSend *mKafkaProducerMockSend) Return(err error) *KafkaProducerMock {
	if mmSend.mock.funcSend != nil {
		mmSend.mock.t.Fatalf("KafkaProducerMock.Send mock is already set by Set")
	}

	if mmSend.defaultExpectation == nil {
		mmSend.defaultExpectation = &KafkaProducerMockSendExpectation{mock: mmSend.mock}
	}
	mmSend.defaultExpectation.results = &KafkaProducerMockSendResults{err}
	mmSend.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSend.mock
}

// Set uses given function f to mock the KafkaProducer.Send method
func (mmSend *mKafkaProducerMockSend) Set(f func(ctx context.Context, topic string, payload []byte) (err error)) *KafkaProducerMock {
	if mmSend.defaultExpectation != nil {
		mmSend.mock.t.Fatalf("Default expectation is already set for the KafkaProducer.Send method")
	}

	if len(mmSend.expectations) > 0 {
		mmSend.mock.t.Fatalf("Some expectations are already set for the KafkaProducer.Send method")
	}

	mmSend.mock.funcSend = f
	mmSend.mock.funcSendOrigin = minimock.CallerInfo(1)
	return mmSend.mock
}

// When sets expectation for the KafkaProducer.Send which will trigger the result defined by the following
// Then helper
func (mmSend *mKafkaProducerMockSend) When(ctx context.Context, topic string, payload []byte) *KafkaProducerMockSendExpectation {
	if mmSend.mock.funcSend != nil {
		mmSend.mock.t.Fatalf("KafkaProducerMock.Send mock is already set by Set")
	}

	expectation := &KafkaProducerMockSendExpectation{
		mock:               mmSend.mock,
		params:             &KafkaProducerMockSendParams{ctx, topic, payload},
		expectationOrigins: KafkaProducerMockSendExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSend.expectations = append(mmSend.expectations, expectation)
	return expectation
}

// Then sets up KafkaProducer.Send return parameters for the expectation previously defined by the When method
func (e *KafkaProducerMockSendExpectation) Then(err error) *KafkaProducerMock {
	e.results = &KafkaProducerMockSendResults{err}
	return e.mock
}

// Times sets number of times KafkaProducer.Send should be invoked
func (mmSend *mKafkaProducerMockSend) Times(n uint64) *mKafkaProducerMockSend {
	if n == 0 {
		mmSend.mock.t.Fatalf("Times of KafkaProducerMock.Send mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSend.expectedInvocations, n)
	mmSend.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSend
}

func (mmSend *mKafkaProducerMockSend) invocationsDone() bool {
	if len(mmSend.expectations) == 0 && mmSend.defaultExpectation == nil && mmSend.mock.funcSend == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSend.mock.afterSendCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSend.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Send implements mm_brokers.KafkaProducer
func (mmSend *KafkaProducerMock) Send(ctx context.Context, topic string, payload []byte) (err error) {
	mm_atomic.AddUint64(&mmSend.beforeSendCounter, 1)
	defer mm_atomic.AddUint64(&mmSend.afterSendCounter, 1)

	mmSend.t.Helper()

	if mmSend.inspectFuncSend != nil {
		mmSend.inspectFuncSend(ctx, topic, payload)
	}

	mm_params := KafkaProducerMockSendParams{ctx, topic, payload}

	// Record call args
	mmSend.SendMock.mutex.Lock()
	mmSend.SendMock.callArgs = append(mmSend.SendMock.callArgs, &mm_params)
	mmSend.SendMock.mutex.Unlock()

	for _, e := range mmSend.SendMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSend.SendMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSend.SendMock.defaultExpectation.Counter, 1)
		mm_want := mmSend.SendMock.defaultExpectation.params
		mm_want_ptrs := mmSend.SendMock.defaultExpectation.paramPtrs

		mm_got := KafkaProducerMockSendParams{ctx, topic, payload}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSend.t.Errorf("KafkaProducerMock.Send got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSend.SendMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.topic != nil && !minimock.Equal(*mm_want_ptrs.topic, mm_got.topic) {
				mmSend.t.Errorf("KafkaProducerMock.Send got unexpected parameter topic, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSend.SendMock.defaultExpectation.expectationOrigins.originTopic, *mm_want_ptrs.topic, mm_got.topic, minimock.Diff(*mm_want_ptrs.topic, mm_got.topic))
			}

			if mm_want_ptrs.payload != nil && !minimock.Equal(*mm_want_ptrs.payload, mm_got.payload) {
				mmSend.t.Errorf("KafkaProducerMock.Send got unexpected parameter payload, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSend.SendMock.defaultExpectation.expectationOrigins.originPayload, *mm_want_ptrs.payload, mm_got.payload, minimock.Diff(*mm_want_ptrs.payload, mm_got.payload))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSend.t.Errorf("KafkaProducerMock.Send got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSend.SendMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSend.SendMock.defaultExpectation.results
		if mm_results == nil {
			mmSend.t.Fatal("No results are set for the KafkaProducerMock.Send")
		}
		return (*mm_results).err
	}
	if mmSend.funcSend != nil {
		return mmSend.funcSend(ctx, topic, payload)
	}
	mmSend.t.Fatalf("Unexpected call to KafkaProducerMock.Send. %v %v %v", ctx, topic, payload)
	return
}

// SendAfterCounter returns a count of finished KafkaProducerMock.Send invocations
func (mmSend *KafkaProducerMock) SendAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSend.afterSendCounter)
}

// SendBeforeCounter returns a count of KafkaProducerMock.Send invocations
func (mmSend *KafkaProducerMock) SendBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSend.beforeSendCounter)
}

// Calls returns a list of arguments used in each call to KafkaProducerMock.Send.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSend *mKafkaProducerMockSend) Calls() []*KafkaProducerMockSendParams {
	mmSend.mutex.RLock()

	argCopy := make([]*KafkaProducerMockSendParams, len(mmSend.callArgs))
	copy(argCopy, mmSend.callArgs)

	mmSend.mutex.RUnlock()

	return argCopy
}

// MinimockSendDone returns true if the count of the Send invocations corresponds
// the number of defined expectations
func (m *KafkaProducerMock) MinimockSendDone() bool {
	if m.SendMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SendMock.invocationsDone()
}

// MinimockSendInspect logs each unmet expectation
func (m *KafkaProducerMock) MinimockSendInspect() {
	for _, e := range m.SendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to KafkaProducerMock.Send at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSendCounter := mm_atomic.LoadUint64(&m.afterSendCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SendMock.defaultExpectation != nil && afterSendCounter < 1 {
		if m.SendMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to KafkaProducerMock.Send at\n%s", m.SendMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to KafkaProducerMock.Send at\n%s with params: %#v", m.SendMock.defaultExpectation.expectationOrigins.origin, *m.SendMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSend != nil && afterSendCounter < 1 {
		m.t.Errorf("Expected call to KafkaProducerMock.Send at\n%s", m.funcSendOrigin)
	}

	if !m.SendMock.invocationsDone() && afterSendCounter > 0 {
		m.t.Errorf("Expected %d calls to KafkaProducerMock.Send at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SendMock.expectedInvocations), m.SendMock.expectedInvocationsOrigin, afterSendCounter)
	}
}

type mKafkaProducerMockSendWithKey struct {
	optional           bool
	mock               *KafkaProducerMock
	defaultExpectation *KafkaProducerMockSendWithKeyExpectation
	expectations       []*KafkaProducerMockSendWithKeyExpectation

	callArgs []*KafkaProducerMockSendWithKeyParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// KafkaProducerMockSendWithKeyExpectation specifies expectation struct of the KafkaProducer.SendWithKey
type KafkaProducerMockSendWithKeyExpectation struct {
	mock               *KafkaProducerMock
	params             *KafkaProducerMockSendWithKeyParams
	paramPtrs          *KafkaProducerMockSendWithKeyParamPtrs
	expectationOrigins KafkaProducerMockSendWithKeyExpectationOrigins
	results            *KafkaProducerMockSendWithKeyResults
	returnOrigin       string
	Counter            uint64
}

// KafkaProducerMockSendWithKeyParams contains parameters of the KafkaProducer.SendWithKey
type KafkaProducerMockSendWithKeyParams struct {
	ctx     context.Context
	topic   string
	key     []byte
	payload []byte
}

// KafkaProducerMockSendWithKeyParamPtrs contains pointers to parameters of the KafkaProducer.SendWithKey
type KafkaProducerMockSendWithKeyParamPtrs struct {
	ctx     *context.Context
	topic   *string
	key     *[]byte
	payload *[]byte
}

// KafkaProducerMockSendWithKeyResults contains results of the KafkaProducer.SendWithKey
type KafkaProducerMockSendWithKeyResults struct {
	err error
}

// KafkaProducerMockSendWithKeyOrigins contains origins of expectations of the KafkaProducer.SendWithKey
type KafkaProducerMockSendWithKeyExpectationOrigins struct {
	origin        string
	originCtx     string
	originTopic   string
	originKey     string
	originPayload string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSendWithKey *mKafkaProducerMockSendWithKey) Optional() *mKafkaProducerMockSendWithKey {
	mmSendWithKey.optional = true
	return mmSendWithKey
}

// Expect sets up expected params for KafkaProducer.SendWithKey
func (mmSendWithKey *mKafkaProducerMockSendWithKey) Expect(ctx context.Context, topic string, key []byte, payload []byte) *mKafkaProducerMockSendWithKey {
	if mmSendWithKey.mock.funcSendWithKey != nil {
		mmSendWithKey.mock.t.Fatalf("KafkaProducerMock.SendWithKey mock is already set by Set")
	}

	if mmSendWithKey.defaultExpectation == nil {
		mmSendWithKey.defaultExpectation = &KafkaProducerMockSendWithKeyExpectation{}
	}

	if mmSendWithKey.defaultExpectation.paramPtrs != nil {
		mmSendWithKey.mock.t.Fatalf("KafkaProducerMock.SendWithKey mock is already set by ExpectParams functions")
	}

	mmSendWithKey.defaultExpectation.params = &KafkaProducerMockSendWithKeyParams{ctx, topic, key, payload}
	mmSendWithKey.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSendWithKey.expectations {
		if minimock.Equal(e.params, mmSendWithKey.defaultExpectation.params) {
			mmSendWithKey.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSendWithKey.defaultExpectation.params)
		}
	}

	return mmSendWithKey
}

// ExpectCtxParam1 sets up expected param ctx for KafkaProducer.SendWithKey
func (mmSendWithKey *mKafkaProducerMockSendWithKey) ExpectCtxParam1(ctx context.Context) *mKafkaProducerMockSendWithKey {
	if mmSendWithKey.mock.funcSendWithKey != nil {
		mmSendWithKey.mock.t.Fatalf("KafkaProducerMock.SendWithKey mock is already set by Set")
	}

	if mmSendWithKey.defaultExpectation == nil {
		mmSendWithKey.defaultExpectation = &KafkaProducerMockSendWithKeyExpectation{}
	}

	if mmSendWithKey.defaultExpectation.params != nil {
		mmSendWithKey.mock.t.Fatalf("KafkaProducerMock.SendWithKey mock is already set by Expect")
	}

	if mmSendWithKey.defaultExpectation.paramPtrs == nil {
		mmSendWithKey.defaultExpectation.paramPtrs = &KafkaProducerMockSendWithKeyParamPtrs{}
	}
	mmSendWithKey.defaultExpectation.paramPtrs.ctx = &ctx
	mmSendWithKey.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmSendWithKey
}

// ExpectTopicParam2 sets up expected param topic for KafkaProducer.SendWithKey
func (mmSendWithKey *mKafkaProducerMockSendWithKey) ExpectTopicParam2(topic string) *mKafkaProducerMockSendWithKey {
	if mmSendWithKey.mock.funcSendWithKey != nil {
		mmSendWithKey.mock.t.Fatalf("KafkaProducerMock.SendWithKey mock is already set by Set")
	}

	if mmSendWithKey.defaultExpectation == nil {
		mmSendWithKey.defaultExpectation = &KafkaProducerMockSendWithKeyExpectation{}
	}

	if mmSendWithKey.defaultExpectation.params != nil {
		mmSendWithKey.mock.t.Fatalf("KafkaProducerMock.SendWithKey mock is already set by Expect")
	}

	if mmSendWithKey.defaultExpectation.paramPtrs == nil {
		mmSendWithKey.defaultExpectation.paramPtrs = &KafkaProducerMockSendWithKeyParamPtrs{}
	}
	mmSendWithKey.defaultExpectation.paramPtrs.topic = &topic
	mmSendWithKey.defaultExpectation.expectationOrigins.originTopic = minimock.CallerInfo(1)

	return mmSendWithKey
}

// ExpectKeyParam3 sets up expected param key for KafkaProducer.SendWithKey
func (mmSendWithKey *mKafkaProducerMockSendWithKey) ExpectKeyParam3(key []byte) *mKafkaProducerMockSendWithKey {
	if mmSendWithKey.mock.funcSendWithKey != nil {
		mmSendWithKey.mock.t.Fatalf("KafkaProducerMock.SendWithKey mock is already set by Set")
	}

	if mmSendWithKey.defaultExpectation == nil {
		mmSendWithKey.defaultExpectation = &KafkaProducerMockSendWithKeyExpectation{}
	}

	if mmSendWithKey.defaultExpectation.params != nil {
		mmSendWithKey.mock.t.Fatalf("KafkaProducerMock.SendWithKey mock is already set by Expect")
	}

	if mmSendWithKey.defaultExpectation.paramPtrs == nil {
		mmSendWithKey.defaultExpectation.paramPtrs = &KafkaProducerMockSendWithKeyParamPtrs{}
	}
	mmSendWithKey.defaultExpectation.paramPtrs.key = &key
	mmSendWithKey.defaultExpectation.expectationOrigins.originKey = minimock.CallerInfo(1)

	return mmSendWithKey
}

// ExpectPayloadParam4 sets up expected param payload for KafkaProducer.SendWithKey
func (mmSendWithKey *mKafkaProducerMockSendWithKey) ExpectPayloadParam4(payload []byte) *mKafkaProducerMockSendWithKey {
	if mmSendWithKey.mock.funcSendWithKey != nil {
		mmSendWithKey.mock.t.Fatalf("KafkaProducerMock.SendWithKey mock is already set by Set")
	}

	if mmSendWithKey.defaultExpectation == nil {
		mmSendWithKey.defaultExpectation = &KafkaProducerMockSendWithKeyExpectation{}
	}

	if mmSendWithKey.defaultExpectation.params != nil {
		mmSendWithKey.mock.t.Fatalf("KafkaProducerMock.SendWithKey mock is already set by Expect")
	}

	if mmSendWithKey.defaultExpectation.paramPtrs == nil {
		mmSendWithKey.defaultExpectation.paramPtrs = &KafkaProducerMockSendWithKeyParamPtrs{}
	}
	mmSendWithKey.defaultExpectation.paramPtrs.payload = &payload
	mmSendWithKey.defaultExpectation.expectationOrigins.originPayload = minimock.CallerInfo(1)

	return mmSendWithKey
}

// Inspect accepts an inspector function that has same arguments as the KafkaProducer.SendWithKey
func (mmSendWithKey *mKafkaProducerMockSendWithKey) Inspect(f func(ctx context.Context, topic string, key []byte, payload []byte)) *mKafkaProducerMockSendWithKey {
	if mmSendWithKey.mock.inspectFuncSendWithKey != nil {
		mmSendWithKey.mock.t.Fatalf("Inspect function is already set for KafkaProducerMock.SendWithKey")
	}

	mmSendWithKey.mock.inspectFuncSendWithKey = f

	return mmSendWithKey
}

// Return sets up results that will be returned by KafkaProducer.SendWithKey
func (mmSendWithKey *mKafkaProducerMockSendWithKey) Return(err error) *KafkaProducerMock {
	if mmSendWithKey.mock.funcSendWithKey != nil {
		mmSendWithKey.mock.t.Fatalf("KafkaProducerMock.SendWithKey mock is already set by Set")
	}

	if mmSendWithKey.defaultExpectation == nil {
		mmSendWithKey.defaultExpectation = &KafkaProducerMockSendWithKeyExpectation{mock: mmSendWithKey.mock}
	}
	mmSendWithKey.defaultExpectation.results = &KafkaProducerMockSendWithKeyResults{err}
	mmSendWithKey.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSendWithKey.mock
}

// Set uses given function f to mock the KafkaProducer.SendWithKey method
func (mmSendWithKey *mKafkaProducerMockSendWithKey) Set(f func(ctx context.Context, topic string, key []byte, payload []byte) (err error)) *KafkaProducerMock {
	if mmSendWithKey.defaultExpectation != nil {
		mmSendWithKey.mock.t.Fatalf("Default expectation is already set for the KafkaProducer.SendWithKey method")
	}

	if len(mmSendWithKey.expectations) > 0 {
		mmSendWithKey.mock.t.Fatalf("Some expectations are already set for the KafkaProducer.SendWithKey method")
	}

	mmSendWithKey.mock.funcSendWithKey = f
	mmSendWithKey.mock.funcSendWithKeyOrigin = minimock.CallerInfo(1)
	return mmSendWithKey.mock
}

// When sets expectation for the KafkaProducer.SendWithKey which will trigger the result defined by the following
// Then helper
func (mmSendWithKey *mKafkaProducerMockSendWithKey) When(ctx context.Context, topic string, key []byte, payload []byte) *KafkaProducerMockSendWithKeyExpectation {
	if mmSendWithKey.mock.funcSendWithKey != nil {
		mmSendWithKey.mock.t.Fatalf("KafkaProducerMock.SendWithKey mock is already set by Set")
	}

	expectation := &KafkaProducerMockSendWithKeyExpectation{
		mock:               mmSendWithKey.mock,
		params:             &KafkaProducerMockSendWithKeyParams{ctx, topic, key, payload},
		expectationOrigins: KafkaProducerMockSendWithKeyExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSendWithKey.expectations = append(mmSendWithKey.expectations, expectation)
	return expectation
}

// Then sets up KafkaProducer.SendWithKey return parameters for the expectation previously defined by the When method
func (e *KafkaProducerMockSendWithKeyExpectation) Then(err error) *KafkaProducerMock {
	e.results = &KafkaProducerMockSendWithKeyResults{err}
	return e.mock
}

// Times sets number of times KafkaProducer.SendWithKey should be invoked
func (mmSendWithKey *mKafkaProducerMockSendWithKey) Times(n uint64) *mKafkaProducerMockSendWithKey {
	if n == 0 {
		mmSendWithKey.mock.t.Fatalf("Times of KafkaProducerMock.SendWithKey mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSendWithKey.expectedInvocations, n)
	mmSendWithKey.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSendWithKey
}

func (mmSendWithKey *mKafkaProducerMockSendWithKey) invocationsDone() bool {
	if len(mmSendWithKey.expectations) == 0 && mmSendWithKey.defaultExpectation == nil && mmSendWithKey.mock.funcSendWithKey == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSendWithKey.mock.afterSendWithKeyCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSendWithKey.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// SendWithKey implements mm_brokers.KafkaProducer
func (mmSendWithKey *KafkaProducerMock) SendWithKey(ctx context.Context, topic string, key []byte, payload []byte) (err error) {
	mm_atomic.AddUint64(&mmSendWithKey.beforeSendWithKeyCounter, 1)
	defer mm_atomic.AddUint64(&mmSendWithKey.afterSendWithKeyCounter, 1)

	mmSendWithKey.t.Helper()

	if mmSendWithKey.inspectFuncSendWithKey != nil {
		mmSendWithKey.inspectFuncSendWithKey(ctx, topic, key, payload)
	}

	mm_params := KafkaProducerMockSendWithKeyParams{ctx, topic, key, payload}

	// Record call args
	mmSendWithKey.SendWithKeyMock.mutex.Lock()
	mmSendWithKey.SendWithKeyMock.callArgs = append(mmSendWithKey.SendWithKeyMock.callArgs, &mm_params)
	mmSendWithKey.SendWithKeyMock.mutex.Unlock()

	for _, e := range mmSendWithKey.SendWithKeyMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSendWithKey.SendWithKeyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSendWithKey.SendWithKeyMock.defaultExpectation.Counter, 1)
		mm_want := mmSendWithKey.SendWithKeyMock.defaultExpectation.params
		mm_want_ptrs := mmSendWithKey.SendWithKeyMock.defaultExpectation.paramPtrs

		mm_got := KafkaProducerMockSendWithKeyParams{ctx, topic, key, payload}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSendWithKey.t.Errorf("KafkaProducerMock.SendWithKey got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSendWithKey.SendWithKeyMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.topic != nil && !minimock.Equal(*mm_want_ptrs.topic, mm_got.topic) {
				mmSendWithKey.t.Errorf("KafkaProducerMock.SendWithKey got unexpected parameter topic, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSendWithKey.SendWithKeyMock.defaultExpectation.expectationOrigins.originTopic, *mm_want_ptrs.topic, mm_got.topic, minimock.Diff(*mm_want_ptrs.topic, mm_got.topic))
			}

			if mm_want_ptrs.key != nil && !minimock.Equal(*mm_want_ptrs.key, mm_got.key) {
				mmSendWithKey.t.Errorf("KafkaProducerMock.SendWithKey got unexpected parameter key, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSendWithKey.SendWithKeyMock.defaultExpectation.expectationOrigins.originKey, *mm_want_ptrs.key, mm_got.key, minimock.Diff(*mm_want_ptrs.key, mm_got.key))
			}

			if mm_want_ptrs.payload != nil && !minimock.Equal(*mm_want_ptrs.payload, mm_got.payload) {
				mmSendWithKey.t.Errorf("KafkaProducerMock.SendWithKey got unexpected parameter payload, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSendWithKey.SendWithKeyMock.defaultExpectation.expectationOrigins.originPayload, *mm_want_ptrs.payload, mm_got.payload, minimock.Diff(*mm_want_ptrs.payload, mm_got.payload))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSendWithKey.t.Errorf("KafkaProducerMock.SendWithKey got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSendWithKey.SendWithKeyMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSendWithKey.SendWithKeyMock.defaultExpectation.results
		if mm_results == nil {
			mmSendWithKey.t.Fatal("No results are set for the KafkaProducerMock.SendWithKey")
		}
		return (*mm_results).err
	}
	if mmSendWithKey.funcSendWithKey != nil {
		return mmSendWithKey.funcSendWithKey(ctx, topic, key, payload)
	}
	mmSendWithKey.t.Fatalf("Unexpected call to KafkaProducerMock.SendWithKey. %v %v %v %v", ctx, topic, key, payload)
	return
}

// SendWithKeyAfterCounter returns a count of finished KafkaProducerMock.SendWithKey invocations
func (mmSendWithKey *KafkaProducerMock) SendWithKeyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendWithKey.afterSendWithKeyCounter)
}

// SendWithKeyBeforeCounter returns a count of KafkaProducerMock.SendWithKey invocations
func (mmSendWithKey *KafkaProducerMock) SendWithKeyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendWithKey.beforeSendWithKeyCounter)
}

// Calls returns a list of arguments used in each call to KafkaProducerMock.SendWithKey.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSendWithKey *mKafkaProducerMockSendWithKey) Calls() []*KafkaProducerMockSendWithKeyParams {
	mmSendWithKey.mutex.RLock()

	argCopy := make([]*KafkaProducerMockSendWithKeyParams, len(mmSendWithKey.callArgs))
	copy(argCopy, mmSendWithKey.callArgs)

	mmSendWithKey.mutex.RUnlock()

	return argCopy
}

// MinimockSendWithKeyDone returns true if the count of the SendWithKey invocations corresponds
// the number of defined expectations
func (m *KafkaProducerMock) MinimockSendWithKeyDone() bool {
	if m.SendWithKeyMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SendWithKeyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SendWithKeyMock.invocationsDone()
}

// MinimockSendWithKeyInspect logs each unmet expectation
func (m *KafkaProducerMock) MinimockSendWithKeyInspect() {
	for _, e := range m.SendWithKeyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to KafkaProducerMock.SendWithKey at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSendWithKeyCounter := mm_atomic.LoadUint64(&m.afterSendWithKeyCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SendWithKeyMock.defaultExpectation != nil && afterSendWithKeyCounter < 1 {
		if m.SendWithKeyMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to KafkaProducerMock.SendWithKey at\n%s", m.SendWithKeyMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to KafkaProducerMock.SendWithKey at\n%s with params: %#v", m.SendWithKeyMock.defaultExpectation.expectationOrigins.origin, *m.SendWithKeyMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendWithKey != nil && afterSendWithKeyCounter < 1 {
		m.t.Errorf("Expected call to KafkaProducerMock.SendWithKey at\n%s", m.funcSendWithKeyOrigin)
	}

	if !m.SendWithKeyMock.invocationsDone() && afterSendWithKeyCounter > 0 {
		m.t.Errorf("Expected %d calls to KafkaProducerMock.SendWithKey at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SendWithKeyMock.expectedInvocations), m.SendWithKeyMock.expectedInvocationsOrigin, afterSendWithKeyCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *KafkaProducerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCloseInspect()

			m.MinimockSendInspect()

			m.MinimockSendWithKeyInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *KafkaProducerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *KafkaProducerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCloseDone() &&
		m.MinimockSendDone() &&
		m.MinimockSendWithKeyDone()
}
