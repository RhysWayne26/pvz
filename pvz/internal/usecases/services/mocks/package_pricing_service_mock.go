// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

import (
	"pvz-cli/internal/models"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// PackagePricingServiceMock implements mm_services.PackagePricingService
type PackagePricingServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcEvaluate          func(pkg models.PackageType, weight float32, price float32) (surcharge float32, err error)
	funcEvaluateOrigin    string
	inspectFuncEvaluate   func(pkg models.PackageType, weight float32, price float32)
	afterEvaluateCounter  uint64
	beforeEvaluateCounter uint64
	EvaluateMock          mPackagePricingServiceMockEvaluate
}

// NewPackagePricingServiceMock returns a mock for mm_services.PackagePricingService
func NewPackagePricingServiceMock(t minimock.Tester) *PackagePricingServiceMock {
	m := &PackagePricingServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.EvaluateMock = mPackagePricingServiceMockEvaluate{mock: m}
	m.EvaluateMock.callArgs = []*PackagePricingServiceMockEvaluateParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mPackagePricingServiceMockEvaluate struct {
	optional           bool
	mock               *PackagePricingServiceMock
	defaultExpectation *PackagePricingServiceMockEvaluateExpectation
	expectations       []*PackagePricingServiceMockEvaluateExpectation

	callArgs []*PackagePricingServiceMockEvaluateParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// PackagePricingServiceMockEvaluateExpectation specifies expectation struct of the PackagePricingService.Evaluate
type PackagePricingServiceMockEvaluateExpectation struct {
	mock               *PackagePricingServiceMock
	params             *PackagePricingServiceMockEvaluateParams
	paramPtrs          *PackagePricingServiceMockEvaluateParamPtrs
	expectationOrigins PackagePricingServiceMockEvaluateExpectationOrigins
	results            *PackagePricingServiceMockEvaluateResults
	returnOrigin       string
	Counter            uint64
}

// PackagePricingServiceMockEvaluateParams contains parameters of the PackagePricingService.Evaluate
type PackagePricingServiceMockEvaluateParams struct {
	pkg    models.PackageType
	weight float32
	price  float32
}

// PackagePricingServiceMockEvaluateParamPtrs contains pointers to parameters of the PackagePricingService.Evaluate
type PackagePricingServiceMockEvaluateParamPtrs struct {
	pkg    *models.PackageType
	weight *float32
	price  *float32
}

// PackagePricingServiceMockEvaluateResults contains results of the PackagePricingService.Evaluate
type PackagePricingServiceMockEvaluateResults struct {
	surcharge float32
	err       error
}

// PackagePricingServiceMockEvaluateOrigins contains origins of expectations of the PackagePricingService.Evaluate
type PackagePricingServiceMockEvaluateExpectationOrigins struct {
	origin       string
	originPkg    string
	originWeight string
	originPrice  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmEvaluate *mPackagePricingServiceMockEvaluate) Optional() *mPackagePricingServiceMockEvaluate {
	mmEvaluate.optional = true
	return mmEvaluate
}

// Expect sets up expected params for PackagePricingService.Evaluate
func (mmEvaluate *mPackagePricingServiceMockEvaluate) Expect(pkg models.PackageType, weight float32, price float32) *mPackagePricingServiceMockEvaluate {
	if mmEvaluate.mock.funcEvaluate != nil {
		mmEvaluate.mock.t.Fatalf("PackagePricingServiceMock.Evaluate mock is already set by Set")
	}

	if mmEvaluate.defaultExpectation == nil {
		mmEvaluate.defaultExpectation = &PackagePricingServiceMockEvaluateExpectation{}
	}

	if mmEvaluate.defaultExpectation.paramPtrs != nil {
		mmEvaluate.mock.t.Fatalf("PackagePricingServiceMock.Evaluate mock is already set by ExpectParams functions")
	}

	mmEvaluate.defaultExpectation.params = &PackagePricingServiceMockEvaluateParams{pkg, weight, price}
	mmEvaluate.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmEvaluate.expectations {
		if minimock.Equal(e.params, mmEvaluate.defaultExpectation.params) {
			mmEvaluate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmEvaluate.defaultExpectation.params)
		}
	}

	return mmEvaluate
}

// ExpectPkgParam1 sets up expected param pkg for PackagePricingService.Evaluate
func (mmEvaluate *mPackagePricingServiceMockEvaluate) ExpectPkgParam1(pkg models.PackageType) *mPackagePricingServiceMockEvaluate {
	if mmEvaluate.mock.funcEvaluate != nil {
		mmEvaluate.mock.t.Fatalf("PackagePricingServiceMock.Evaluate mock is already set by Set")
	}

	if mmEvaluate.defaultExpectation == nil {
		mmEvaluate.defaultExpectation = &PackagePricingServiceMockEvaluateExpectation{}
	}

	if mmEvaluate.defaultExpectation.params != nil {
		mmEvaluate.mock.t.Fatalf("PackagePricingServiceMock.Evaluate mock is already set by Expect")
	}

	if mmEvaluate.defaultExpectation.paramPtrs == nil {
		mmEvaluate.defaultExpectation.paramPtrs = &PackagePricingServiceMockEvaluateParamPtrs{}
	}
	mmEvaluate.defaultExpectation.paramPtrs.pkg = &pkg
	mmEvaluate.defaultExpectation.expectationOrigins.originPkg = minimock.CallerInfo(1)

	return mmEvaluate
}

// ExpectWeightParam2 sets up expected param weight for PackagePricingService.Evaluate
func (mmEvaluate *mPackagePricingServiceMockEvaluate) ExpectWeightParam2(weight float32) *mPackagePricingServiceMockEvaluate {
	if mmEvaluate.mock.funcEvaluate != nil {
		mmEvaluate.mock.t.Fatalf("PackagePricingServiceMock.Evaluate mock is already set by Set")
	}

	if mmEvaluate.defaultExpectation == nil {
		mmEvaluate.defaultExpectation = &PackagePricingServiceMockEvaluateExpectation{}
	}

	if mmEvaluate.defaultExpectation.params != nil {
		mmEvaluate.mock.t.Fatalf("PackagePricingServiceMock.Evaluate mock is already set by Expect")
	}

	if mmEvaluate.defaultExpectation.paramPtrs == nil {
		mmEvaluate.defaultExpectation.paramPtrs = &PackagePricingServiceMockEvaluateParamPtrs{}
	}
	mmEvaluate.defaultExpectation.paramPtrs.weight = &weight
	mmEvaluate.defaultExpectation.expectationOrigins.originWeight = minimock.CallerInfo(1)

	return mmEvaluate
}

// ExpectPriceParam3 sets up expected param price for PackagePricingService.Evaluate
func (mmEvaluate *mPackagePricingServiceMockEvaluate) ExpectPriceParam3(price float32) *mPackagePricingServiceMockEvaluate {
	if mmEvaluate.mock.funcEvaluate != nil {
		mmEvaluate.mock.t.Fatalf("PackagePricingServiceMock.Evaluate mock is already set by Set")
	}

	if mmEvaluate.defaultExpectation == nil {
		mmEvaluate.defaultExpectation = &PackagePricingServiceMockEvaluateExpectation{}
	}

	if mmEvaluate.defaultExpectation.params != nil {
		mmEvaluate.mock.t.Fatalf("PackagePricingServiceMock.Evaluate mock is already set by Expect")
	}

	if mmEvaluate.defaultExpectation.paramPtrs == nil {
		mmEvaluate.defaultExpectation.paramPtrs = &PackagePricingServiceMockEvaluateParamPtrs{}
	}
	mmEvaluate.defaultExpectation.paramPtrs.price = &price
	mmEvaluate.defaultExpectation.expectationOrigins.originPrice = minimock.CallerInfo(1)

	return mmEvaluate
}

// Inspect accepts an inspector function that has same arguments as the PackagePricingService.Evaluate
func (mmEvaluate *mPackagePricingServiceMockEvaluate) Inspect(f func(pkg models.PackageType, weight float32, price float32)) *mPackagePricingServiceMockEvaluate {
	if mmEvaluate.mock.inspectFuncEvaluate != nil {
		mmEvaluate.mock.t.Fatalf("Inspect function is already set for PackagePricingServiceMock.Evaluate")
	}

	mmEvaluate.mock.inspectFuncEvaluate = f

	return mmEvaluate
}

// Return sets up results that will be returned by PackagePricingService.Evaluate
func (mmEvaluate *mPackagePricingServiceMockEvaluate) Return(surcharge float32, err error) *PackagePricingServiceMock {
	if mmEvaluate.mock.funcEvaluate != nil {
		mmEvaluate.mock.t.Fatalf("PackagePricingServiceMock.Evaluate mock is already set by Set")
	}

	if mmEvaluate.defaultExpectation == nil {
		mmEvaluate.defaultExpectation = &PackagePricingServiceMockEvaluateExpectation{mock: mmEvaluate.mock}
	}
	mmEvaluate.defaultExpectation.results = &PackagePricingServiceMockEvaluateResults{surcharge, err}
	mmEvaluate.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmEvaluate.mock
}

// Set uses given function f to mock the PackagePricingService.Evaluate method
func (mmEvaluate *mPackagePricingServiceMockEvaluate) Set(f func(pkg models.PackageType, weight float32, price float32) (surcharge float32, err error)) *PackagePricingServiceMock {
	if mmEvaluate.defaultExpectation != nil {
		mmEvaluate.mock.t.Fatalf("Default expectation is already set for the PackagePricingService.Evaluate method")
	}

	if len(mmEvaluate.expectations) > 0 {
		mmEvaluate.mock.t.Fatalf("Some expectations are already set for the PackagePricingService.Evaluate method")
	}

	mmEvaluate.mock.funcEvaluate = f
	mmEvaluate.mock.funcEvaluateOrigin = minimock.CallerInfo(1)
	return mmEvaluate.mock
}

// When sets expectation for the PackagePricingService.Evaluate which will trigger the result defined by the following
// Then helper
func (mmEvaluate *mPackagePricingServiceMockEvaluate) When(pkg models.PackageType, weight float32, price float32) *PackagePricingServiceMockEvaluateExpectation {
	if mmEvaluate.mock.funcEvaluate != nil {
		mmEvaluate.mock.t.Fatalf("PackagePricingServiceMock.Evaluate mock is already set by Set")
	}

	expectation := &PackagePricingServiceMockEvaluateExpectation{
		mock:               mmEvaluate.mock,
		params:             &PackagePricingServiceMockEvaluateParams{pkg, weight, price},
		expectationOrigins: PackagePricingServiceMockEvaluateExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmEvaluate.expectations = append(mmEvaluate.expectations, expectation)
	return expectation
}

// Then sets up PackagePricingService.Evaluate return parameters for the expectation previously defined by the When method
func (e *PackagePricingServiceMockEvaluateExpectation) Then(surcharge float32, err error) *PackagePricingServiceMock {
	e.results = &PackagePricingServiceMockEvaluateResults{surcharge, err}
	return e.mock
}

// Times sets number of times PackagePricingService.Evaluate should be invoked
func (mmEvaluate *mPackagePricingServiceMockEvaluate) Times(n uint64) *mPackagePricingServiceMockEvaluate {
	if n == 0 {
		mmEvaluate.mock.t.Fatalf("Times of PackagePricingServiceMock.Evaluate mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmEvaluate.expectedInvocations, n)
	mmEvaluate.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmEvaluate
}

func (mmEvaluate *mPackagePricingServiceMockEvaluate) invocationsDone() bool {
	if len(mmEvaluate.expectations) == 0 && mmEvaluate.defaultExpectation == nil && mmEvaluate.mock.funcEvaluate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmEvaluate.mock.afterEvaluateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmEvaluate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Evaluate implements mm_services.PackagePricingService
func (mmEvaluate *PackagePricingServiceMock) Evaluate(pkg models.PackageType, weight float32, price float32) (surcharge float32, err error) {
	mm_atomic.AddUint64(&mmEvaluate.beforeEvaluateCounter, 1)
	defer mm_atomic.AddUint64(&mmEvaluate.afterEvaluateCounter, 1)

	mmEvaluate.t.Helper()

	if mmEvaluate.inspectFuncEvaluate != nil {
		mmEvaluate.inspectFuncEvaluate(pkg, weight, price)
	}

	mm_params := PackagePricingServiceMockEvaluateParams{pkg, weight, price}

	// Record call args
	mmEvaluate.EvaluateMock.mutex.Lock()
	mmEvaluate.EvaluateMock.callArgs = append(mmEvaluate.EvaluateMock.callArgs, &mm_params)
	mmEvaluate.EvaluateMock.mutex.Unlock()

	for _, e := range mmEvaluate.EvaluateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.surcharge, e.results.err
		}
	}

	if mmEvaluate.EvaluateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmEvaluate.EvaluateMock.defaultExpectation.Counter, 1)
		mm_want := mmEvaluate.EvaluateMock.defaultExpectation.params
		mm_want_ptrs := mmEvaluate.EvaluateMock.defaultExpectation.paramPtrs

		mm_got := PackagePricingServiceMockEvaluateParams{pkg, weight, price}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.pkg != nil && !minimock.Equal(*mm_want_ptrs.pkg, mm_got.pkg) {
				mmEvaluate.t.Errorf("PackagePricingServiceMock.Evaluate got unexpected parameter pkg, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmEvaluate.EvaluateMock.defaultExpectation.expectationOrigins.originPkg, *mm_want_ptrs.pkg, mm_got.pkg, minimock.Diff(*mm_want_ptrs.pkg, mm_got.pkg))
			}

			if mm_want_ptrs.weight != nil && !minimock.Equal(*mm_want_ptrs.weight, mm_got.weight) {
				mmEvaluate.t.Errorf("PackagePricingServiceMock.Evaluate got unexpected parameter weight, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmEvaluate.EvaluateMock.defaultExpectation.expectationOrigins.originWeight, *mm_want_ptrs.weight, mm_got.weight, minimock.Diff(*mm_want_ptrs.weight, mm_got.weight))
			}

			if mm_want_ptrs.price != nil && !minimock.Equal(*mm_want_ptrs.price, mm_got.price) {
				mmEvaluate.t.Errorf("PackagePricingServiceMock.Evaluate got unexpected parameter price, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmEvaluate.EvaluateMock.defaultExpectation.expectationOrigins.originPrice, *mm_want_ptrs.price, mm_got.price, minimock.Diff(*mm_want_ptrs.price, mm_got.price))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmEvaluate.t.Errorf("PackagePricingServiceMock.Evaluate got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmEvaluate.EvaluateMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmEvaluate.EvaluateMock.defaultExpectation.results
		if mm_results == nil {
			mmEvaluate.t.Fatal("No results are set for the PackagePricingServiceMock.Evaluate")
		}
		return (*mm_results).surcharge, (*mm_results).err
	}
	if mmEvaluate.funcEvaluate != nil {
		return mmEvaluate.funcEvaluate(pkg, weight, price)
	}
	mmEvaluate.t.Fatalf("Unexpected call to PackagePricingServiceMock.Evaluate. %v %v %v", pkg, weight, price)
	return
}

// EvaluateAfterCounter returns a count of finished PackagePricingServiceMock.Evaluate invocations
func (mmEvaluate *PackagePricingServiceMock) EvaluateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmEvaluate.afterEvaluateCounter)
}

// EvaluateBeforeCounter returns a count of PackagePricingServiceMock.Evaluate invocations
func (mmEvaluate *PackagePricingServiceMock) EvaluateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmEvaluate.beforeEvaluateCounter)
}

// Calls returns a list of arguments used in each call to PackagePricingServiceMock.Evaluate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmEvaluate *mPackagePricingServiceMockEvaluate) Calls() []*PackagePricingServiceMockEvaluateParams {
	mmEvaluate.mutex.RLock()

	argCopy := make([]*PackagePricingServiceMockEvaluateParams, len(mmEvaluate.callArgs))
	copy(argCopy, mmEvaluate.callArgs)

	mmEvaluate.mutex.RUnlock()

	return argCopy
}

// MinimockEvaluateDone returns true if the count of the Evaluate invocations corresponds
// the number of defined expectations
func (m *PackagePricingServiceMock) MinimockEvaluateDone() bool {
	if m.EvaluateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.EvaluateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.EvaluateMock.invocationsDone()
}

// MinimockEvaluateInspect logs each unmet expectation
func (m *PackagePricingServiceMock) MinimockEvaluateInspect() {
	for _, e := range m.EvaluateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PackagePricingServiceMock.Evaluate at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterEvaluateCounter := mm_atomic.LoadUint64(&m.afterEvaluateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.EvaluateMock.defaultExpectation != nil && afterEvaluateCounter < 1 {
		if m.EvaluateMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to PackagePricingServiceMock.Evaluate at\n%s", m.EvaluateMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to PackagePricingServiceMock.Evaluate at\n%s with params: %#v", m.EvaluateMock.defaultExpectation.expectationOrigins.origin, *m.EvaluateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcEvaluate != nil && afterEvaluateCounter < 1 {
		m.t.Errorf("Expected call to PackagePricingServiceMock.Evaluate at\n%s", m.funcEvaluateOrigin)
	}

	if !m.EvaluateMock.invocationsDone() && afterEvaluateCounter > 0 {
		m.t.Errorf("Expected %d calls to PackagePricingServiceMock.Evaluate at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.EvaluateMock.expectedInvocations), m.EvaluateMock.expectedInvocationsOrigin, afterEvaluateCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *PackagePricingServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockEvaluateInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *PackagePricingServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *PackagePricingServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockEvaluateDone()
}
