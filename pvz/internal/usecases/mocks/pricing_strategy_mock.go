// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i pvz-cli/internal/usecases/services/strategies.PricingStrategy -o pricing_strategy_mock.go -n PricingStrategyMock -p mocks

import (
	"pvz-cli/internal/models"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// PricingStrategyMock implements mm_strategies.PricingStrategy
type PricingStrategyMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetSurcharge          func(pkg models.PackageType) (f1 float32)
	funcGetSurchargeOrigin    string
	inspectFuncGetSurcharge   func(pkg models.PackageType)
	afterGetSurchargeCounter  uint64
	beforeGetSurchargeCounter uint64
	GetSurchargeMock          mPricingStrategyMockGetSurcharge
}

// NewPricingStrategyMock returns a mock for mm_strategies.PricingStrategy
func NewPricingStrategyMock(t minimock.Tester) *PricingStrategyMock {
	m := &PricingStrategyMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetSurchargeMock = mPricingStrategyMockGetSurcharge{mock: m}
	m.GetSurchargeMock.callArgs = []*PricingStrategyMockGetSurchargeParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mPricingStrategyMockGetSurcharge struct {
	optional           bool
	mock               *PricingStrategyMock
	defaultExpectation *PricingStrategyMockGetSurchargeExpectation
	expectations       []*PricingStrategyMockGetSurchargeExpectation

	callArgs []*PricingStrategyMockGetSurchargeParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// PricingStrategyMockGetSurchargeExpectation specifies expectation struct of the PricingStrategy.GetSurcharge
type PricingStrategyMockGetSurchargeExpectation struct {
	mock               *PricingStrategyMock
	params             *PricingStrategyMockGetSurchargeParams
	paramPtrs          *PricingStrategyMockGetSurchargeParamPtrs
	expectationOrigins PricingStrategyMockGetSurchargeExpectationOrigins
	results            *PricingStrategyMockGetSurchargeResults
	returnOrigin       string
	Counter            uint64
}

// PricingStrategyMockGetSurchargeParams contains parameters of the PricingStrategy.GetSurcharge
type PricingStrategyMockGetSurchargeParams struct {
	pkg models.PackageType
}

// PricingStrategyMockGetSurchargeParamPtrs contains pointers to parameters of the PricingStrategy.GetSurcharge
type PricingStrategyMockGetSurchargeParamPtrs struct {
	pkg *models.PackageType
}

// PricingStrategyMockGetSurchargeResults contains results of the PricingStrategy.GetSurcharge
type PricingStrategyMockGetSurchargeResults struct {
	f1 float32
}

// PricingStrategyMockGetSurchargeOrigins contains origins of expectations of the PricingStrategy.GetSurcharge
type PricingStrategyMockGetSurchargeExpectationOrigins struct {
	origin    string
	originPkg string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetSurcharge *mPricingStrategyMockGetSurcharge) Optional() *mPricingStrategyMockGetSurcharge {
	mmGetSurcharge.optional = true
	return mmGetSurcharge
}

// Expect sets up expected params for PricingStrategy.GetSurcharge
func (mmGetSurcharge *mPricingStrategyMockGetSurcharge) Expect(pkg models.PackageType) *mPricingStrategyMockGetSurcharge {
	if mmGetSurcharge.mock.funcGetSurcharge != nil {
		mmGetSurcharge.mock.t.Fatalf("PricingStrategyMock.GetSurcharge mock is already set by Set")
	}

	if mmGetSurcharge.defaultExpectation == nil {
		mmGetSurcharge.defaultExpectation = &PricingStrategyMockGetSurchargeExpectation{}
	}

	if mmGetSurcharge.defaultExpectation.paramPtrs != nil {
		mmGetSurcharge.mock.t.Fatalf("PricingStrategyMock.GetSurcharge mock is already set by ExpectParams functions")
	}

	mmGetSurcharge.defaultExpectation.params = &PricingStrategyMockGetSurchargeParams{pkg}
	mmGetSurcharge.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetSurcharge.expectations {
		if minimock.Equal(e.params, mmGetSurcharge.defaultExpectation.params) {
			mmGetSurcharge.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetSurcharge.defaultExpectation.params)
		}
	}

	return mmGetSurcharge
}

// ExpectPkgParam1 sets up expected param pkg for PricingStrategy.GetSurcharge
func (mmGetSurcharge *mPricingStrategyMockGetSurcharge) ExpectPkgParam1(pkg models.PackageType) *mPricingStrategyMockGetSurcharge {
	if mmGetSurcharge.mock.funcGetSurcharge != nil {
		mmGetSurcharge.mock.t.Fatalf("PricingStrategyMock.GetSurcharge mock is already set by Set")
	}

	if mmGetSurcharge.defaultExpectation == nil {
		mmGetSurcharge.defaultExpectation = &PricingStrategyMockGetSurchargeExpectation{}
	}

	if mmGetSurcharge.defaultExpectation.params != nil {
		mmGetSurcharge.mock.t.Fatalf("PricingStrategyMock.GetSurcharge mock is already set by Expect")
	}

	if mmGetSurcharge.defaultExpectation.paramPtrs == nil {
		mmGetSurcharge.defaultExpectation.paramPtrs = &PricingStrategyMockGetSurchargeParamPtrs{}
	}
	mmGetSurcharge.defaultExpectation.paramPtrs.pkg = &pkg
	mmGetSurcharge.defaultExpectation.expectationOrigins.originPkg = minimock.CallerInfo(1)

	return mmGetSurcharge
}

// Inspect accepts an inspector function that has same arguments as the PricingStrategy.GetSurcharge
func (mmGetSurcharge *mPricingStrategyMockGetSurcharge) Inspect(f func(pkg models.PackageType)) *mPricingStrategyMockGetSurcharge {
	if mmGetSurcharge.mock.inspectFuncGetSurcharge != nil {
		mmGetSurcharge.mock.t.Fatalf("Inspect function is already set for PricingStrategyMock.GetSurcharge")
	}

	mmGetSurcharge.mock.inspectFuncGetSurcharge = f

	return mmGetSurcharge
}

// Return sets up results that will be returned by PricingStrategy.GetSurcharge
func (mmGetSurcharge *mPricingStrategyMockGetSurcharge) Return(f1 float32) *PricingStrategyMock {
	if mmGetSurcharge.mock.funcGetSurcharge != nil {
		mmGetSurcharge.mock.t.Fatalf("PricingStrategyMock.GetSurcharge mock is already set by Set")
	}

	if mmGetSurcharge.defaultExpectation == nil {
		mmGetSurcharge.defaultExpectation = &PricingStrategyMockGetSurchargeExpectation{mock: mmGetSurcharge.mock}
	}
	mmGetSurcharge.defaultExpectation.results = &PricingStrategyMockGetSurchargeResults{f1}
	mmGetSurcharge.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetSurcharge.mock
}

// Set uses given function f to mock the PricingStrategy.GetSurcharge method
func (mmGetSurcharge *mPricingStrategyMockGetSurcharge) Set(f func(pkg models.PackageType) (f1 float32)) *PricingStrategyMock {
	if mmGetSurcharge.defaultExpectation != nil {
		mmGetSurcharge.mock.t.Fatalf("Default expectation is already set for the PricingStrategy.GetSurcharge method")
	}

	if len(mmGetSurcharge.expectations) > 0 {
		mmGetSurcharge.mock.t.Fatalf("Some expectations are already set for the PricingStrategy.GetSurcharge method")
	}

	mmGetSurcharge.mock.funcGetSurcharge = f
	mmGetSurcharge.mock.funcGetSurchargeOrigin = minimock.CallerInfo(1)
	return mmGetSurcharge.mock
}

// When sets expectation for the PricingStrategy.GetSurcharge which will trigger the result defined by the following
// Then helper
func (mmGetSurcharge *mPricingStrategyMockGetSurcharge) When(pkg models.PackageType) *PricingStrategyMockGetSurchargeExpectation {
	if mmGetSurcharge.mock.funcGetSurcharge != nil {
		mmGetSurcharge.mock.t.Fatalf("PricingStrategyMock.GetSurcharge mock is already set by Set")
	}

	expectation := &PricingStrategyMockGetSurchargeExpectation{
		mock:               mmGetSurcharge.mock,
		params:             &PricingStrategyMockGetSurchargeParams{pkg},
		expectationOrigins: PricingStrategyMockGetSurchargeExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetSurcharge.expectations = append(mmGetSurcharge.expectations, expectation)
	return expectation
}

// Then sets up PricingStrategy.GetSurcharge return parameters for the expectation previously defined by the When method
func (e *PricingStrategyMockGetSurchargeExpectation) Then(f1 float32) *PricingStrategyMock {
	e.results = &PricingStrategyMockGetSurchargeResults{f1}
	return e.mock
}

// Times sets number of times PricingStrategy.GetSurcharge should be invoked
func (mmGetSurcharge *mPricingStrategyMockGetSurcharge) Times(n uint64) *mPricingStrategyMockGetSurcharge {
	if n == 0 {
		mmGetSurcharge.mock.t.Fatalf("Times of PricingStrategyMock.GetSurcharge mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetSurcharge.expectedInvocations, n)
	mmGetSurcharge.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetSurcharge
}

func (mmGetSurcharge *mPricingStrategyMockGetSurcharge) invocationsDone() bool {
	if len(mmGetSurcharge.expectations) == 0 && mmGetSurcharge.defaultExpectation == nil && mmGetSurcharge.mock.funcGetSurcharge == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetSurcharge.mock.afterGetSurchargeCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetSurcharge.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetSurcharge implements mm_strategies.PricingStrategy
func (mmGetSurcharge *PricingStrategyMock) GetSurcharge(pkg models.PackageType) (f1 float32) {
	mm_atomic.AddUint64(&mmGetSurcharge.beforeGetSurchargeCounter, 1)
	defer mm_atomic.AddUint64(&mmGetSurcharge.afterGetSurchargeCounter, 1)

	mmGetSurcharge.t.Helper()

	if mmGetSurcharge.inspectFuncGetSurcharge != nil {
		mmGetSurcharge.inspectFuncGetSurcharge(pkg)
	}

	mm_params := PricingStrategyMockGetSurchargeParams{pkg}

	// Record call args
	mmGetSurcharge.GetSurchargeMock.mutex.Lock()
	mmGetSurcharge.GetSurchargeMock.callArgs = append(mmGetSurcharge.GetSurchargeMock.callArgs, &mm_params)
	mmGetSurcharge.GetSurchargeMock.mutex.Unlock()

	for _, e := range mmGetSurcharge.GetSurchargeMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.f1
		}
	}

	if mmGetSurcharge.GetSurchargeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetSurcharge.GetSurchargeMock.defaultExpectation.Counter, 1)
		mm_want := mmGetSurcharge.GetSurchargeMock.defaultExpectation.params
		mm_want_ptrs := mmGetSurcharge.GetSurchargeMock.defaultExpectation.paramPtrs

		mm_got := PricingStrategyMockGetSurchargeParams{pkg}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.pkg != nil && !minimock.Equal(*mm_want_ptrs.pkg, mm_got.pkg) {
				mmGetSurcharge.t.Errorf("PricingStrategyMock.GetSurcharge got unexpected parameter pkg, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetSurcharge.GetSurchargeMock.defaultExpectation.expectationOrigins.originPkg, *mm_want_ptrs.pkg, mm_got.pkg, minimock.Diff(*mm_want_ptrs.pkg, mm_got.pkg))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetSurcharge.t.Errorf("PricingStrategyMock.GetSurcharge got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetSurcharge.GetSurchargeMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetSurcharge.GetSurchargeMock.defaultExpectation.results
		if mm_results == nil {
			mmGetSurcharge.t.Fatal("No results are set for the PricingStrategyMock.GetSurcharge")
		}
		return (*mm_results).f1
	}
	if mmGetSurcharge.funcGetSurcharge != nil {
		return mmGetSurcharge.funcGetSurcharge(pkg)
	}
	mmGetSurcharge.t.Fatalf("Unexpected call to PricingStrategyMock.GetSurcharge. %v", pkg)
	return
}

// GetSurchargeAfterCounter returns a count of finished PricingStrategyMock.GetSurcharge invocations
func (mmGetSurcharge *PricingStrategyMock) GetSurchargeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSurcharge.afterGetSurchargeCounter)
}

// GetSurchargeBeforeCounter returns a count of PricingStrategyMock.GetSurcharge invocations
func (mmGetSurcharge *PricingStrategyMock) GetSurchargeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSurcharge.beforeGetSurchargeCounter)
}

// Calls returns a list of arguments used in each call to PricingStrategyMock.GetSurcharge.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetSurcharge *mPricingStrategyMockGetSurcharge) Calls() []*PricingStrategyMockGetSurchargeParams {
	mmGetSurcharge.mutex.RLock()

	argCopy := make([]*PricingStrategyMockGetSurchargeParams, len(mmGetSurcharge.callArgs))
	copy(argCopy, mmGetSurcharge.callArgs)

	mmGetSurcharge.mutex.RUnlock()

	return argCopy
}

// MinimockGetSurchargeDone returns true if the count of the GetSurcharge invocations corresponds
// the number of defined expectations
func (m *PricingStrategyMock) MinimockGetSurchargeDone() bool {
	if m.GetSurchargeMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetSurchargeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetSurchargeMock.invocationsDone()
}

// MinimockGetSurchargeInspect logs each unmet expectation
func (m *PricingStrategyMock) MinimockGetSurchargeInspect() {
	for _, e := range m.GetSurchargeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PricingStrategyMock.GetSurcharge at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetSurchargeCounter := mm_atomic.LoadUint64(&m.afterGetSurchargeCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetSurchargeMock.defaultExpectation != nil && afterGetSurchargeCounter < 1 {
		if m.GetSurchargeMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to PricingStrategyMock.GetSurcharge at\n%s", m.GetSurchargeMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to PricingStrategyMock.GetSurcharge at\n%s with params: %#v", m.GetSurchargeMock.defaultExpectation.expectationOrigins.origin, *m.GetSurchargeMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSurcharge != nil && afterGetSurchargeCounter < 1 {
		m.t.Errorf("Expected call to PricingStrategyMock.GetSurcharge at\n%s", m.funcGetSurchargeOrigin)
	}

	if !m.GetSurchargeMock.invocationsDone() && afterGetSurchargeCounter > 0 {
		m.t.Errorf("Expected %d calls to PricingStrategyMock.GetSurcharge at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetSurchargeMock.expectedInvocations), m.GetSurchargeMock.expectedInvocationsOrigin, afterGetSurchargeCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *PricingStrategyMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetSurchargeInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *PricingStrategyMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *PricingStrategyMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetSurchargeDone()
}
