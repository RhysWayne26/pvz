// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i pvz-cli/internal/usecases/services.HistoryService -o history_service_mock.go -n HistoryServiceMock -p mocks

import (
	"context"
	"pvz-cli/internal/models"
	"pvz-cli/internal/usecases/requests"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// HistoryServiceMock implements mm_services.HistoryService
type HistoryServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcList          func(ctx context.Context, filter requests.OrderHistoryFilter) (ha1 []models.HistoryEntry, err error)
	funcListOrigin    string
	inspectFuncList   func(ctx context.Context, filter requests.OrderHistoryFilter)
	afterListCounter  uint64
	beforeListCounter uint64
	ListMock          mHistoryServiceMockList

	funcRecord          func(ctx context.Context, e models.HistoryEntry) (err error)
	funcRecordOrigin    string
	inspectFuncRecord   func(ctx context.Context, e models.HistoryEntry)
	afterRecordCounter  uint64
	beforeRecordCounter uint64
	RecordMock          mHistoryServiceMockRecord
}

// NewHistoryServiceMock returns a mock for mm_services.HistoryService
func NewHistoryServiceMock(t minimock.Tester) *HistoryServiceMock {
	m := &HistoryServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ListMock = mHistoryServiceMockList{mock: m}
	m.ListMock.callArgs = []*HistoryServiceMockListParams{}

	m.RecordMock = mHistoryServiceMockRecord{mock: m}
	m.RecordMock.callArgs = []*HistoryServiceMockRecordParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mHistoryServiceMockList struct {
	optional           bool
	mock               *HistoryServiceMock
	defaultExpectation *HistoryServiceMockListExpectation
	expectations       []*HistoryServiceMockListExpectation

	callArgs []*HistoryServiceMockListParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// HistoryServiceMockListExpectation specifies expectation struct of the HistoryService.List
type HistoryServiceMockListExpectation struct {
	mock               *HistoryServiceMock
	params             *HistoryServiceMockListParams
	paramPtrs          *HistoryServiceMockListParamPtrs
	expectationOrigins HistoryServiceMockListExpectationOrigins
	results            *HistoryServiceMockListResults
	returnOrigin       string
	Counter            uint64
}

// HistoryServiceMockListParams contains parameters of the HistoryService.List
type HistoryServiceMockListParams struct {
	ctx    context.Context
	filter requests.OrderHistoryFilter
}

// HistoryServiceMockListParamPtrs contains pointers to parameters of the HistoryService.List
type HistoryServiceMockListParamPtrs struct {
	ctx    *context.Context
	filter *requests.OrderHistoryFilter
}

// HistoryServiceMockListResults contains results of the HistoryService.List
type HistoryServiceMockListResults struct {
	ha1 []models.HistoryEntry
	err error
}

// HistoryServiceMockListOrigins contains origins of expectations of the HistoryService.List
type HistoryServiceMockListExpectationOrigins struct {
	origin       string
	originCtx    string
	originFilter string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmList *mHistoryServiceMockList) Optional() *mHistoryServiceMockList {
	mmList.optional = true
	return mmList
}

// Expect sets up expected params for HistoryService.List
func (mmList *mHistoryServiceMockList) Expect(ctx context.Context, filter requests.OrderHistoryFilter) *mHistoryServiceMockList {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("HistoryServiceMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &HistoryServiceMockListExpectation{}
	}

	if mmList.defaultExpectation.paramPtrs != nil {
		mmList.mock.t.Fatalf("HistoryServiceMock.List mock is already set by ExpectParams functions")
	}

	mmList.defaultExpectation.params = &HistoryServiceMockListParams{ctx, filter}
	mmList.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmList.expectations {
		if minimock.Equal(e.params, mmList.defaultExpectation.params) {
			mmList.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmList.defaultExpectation.params)
		}
	}

	return mmList
}

// ExpectCtxParam1 sets up expected param ctx for HistoryService.List
func (mmList *mHistoryServiceMockList) ExpectCtxParam1(ctx context.Context) *mHistoryServiceMockList {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("HistoryServiceMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &HistoryServiceMockListExpectation{}
	}

	if mmList.defaultExpectation.params != nil {
		mmList.mock.t.Fatalf("HistoryServiceMock.List mock is already set by Expect")
	}

	if mmList.defaultExpectation.paramPtrs == nil {
		mmList.defaultExpectation.paramPtrs = &HistoryServiceMockListParamPtrs{}
	}
	mmList.defaultExpectation.paramPtrs.ctx = &ctx
	mmList.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmList
}

// ExpectFilterParam2 sets up expected param filter for HistoryService.List
func (mmList *mHistoryServiceMockList) ExpectFilterParam2(filter requests.OrderHistoryFilter) *mHistoryServiceMockList {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("HistoryServiceMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &HistoryServiceMockListExpectation{}
	}

	if mmList.defaultExpectation.params != nil {
		mmList.mock.t.Fatalf("HistoryServiceMock.List mock is already set by Expect")
	}

	if mmList.defaultExpectation.paramPtrs == nil {
		mmList.defaultExpectation.paramPtrs = &HistoryServiceMockListParamPtrs{}
	}
	mmList.defaultExpectation.paramPtrs.filter = &filter
	mmList.defaultExpectation.expectationOrigins.originFilter = minimock.CallerInfo(1)

	return mmList
}

// Inspect accepts an inspector function that has same arguments as the HistoryService.List
func (mmList *mHistoryServiceMockList) Inspect(f func(ctx context.Context, filter requests.OrderHistoryFilter)) *mHistoryServiceMockList {
	if mmList.mock.inspectFuncList != nil {
		mmList.mock.t.Fatalf("Inspect function is already set for HistoryServiceMock.List")
	}

	mmList.mock.inspectFuncList = f

	return mmList
}

// Return sets up results that will be returned by HistoryService.List
func (mmList *mHistoryServiceMockList) Return(ha1 []models.HistoryEntry, err error) *HistoryServiceMock {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("HistoryServiceMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &HistoryServiceMockListExpectation{mock: mmList.mock}
	}
	mmList.defaultExpectation.results = &HistoryServiceMockListResults{ha1, err}
	mmList.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmList.mock
}

// Set uses given function f to mock the HistoryService.List method
func (mmList *mHistoryServiceMockList) Set(f func(ctx context.Context, filter requests.OrderHistoryFilter) (ha1 []models.HistoryEntry, err error)) *HistoryServiceMock {
	if mmList.defaultExpectation != nil {
		mmList.mock.t.Fatalf("Default expectation is already set for the HistoryService.List method")
	}

	if len(mmList.expectations) > 0 {
		mmList.mock.t.Fatalf("Some expectations are already set for the HistoryService.List method")
	}

	mmList.mock.funcList = f
	mmList.mock.funcListOrigin = minimock.CallerInfo(1)
	return mmList.mock
}

// When sets expectation for the HistoryService.List which will trigger the result defined by the following
// Then helper
func (mmList *mHistoryServiceMockList) When(ctx context.Context, filter requests.OrderHistoryFilter) *HistoryServiceMockListExpectation {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("HistoryServiceMock.List mock is already set by Set")
	}

	expectation := &HistoryServiceMockListExpectation{
		mock:               mmList.mock,
		params:             &HistoryServiceMockListParams{ctx, filter},
		expectationOrigins: HistoryServiceMockListExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmList.expectations = append(mmList.expectations, expectation)
	return expectation
}

// Then sets up HistoryService.List return parameters for the expectation previously defined by the When method
func (e *HistoryServiceMockListExpectation) Then(ha1 []models.HistoryEntry, err error) *HistoryServiceMock {
	e.results = &HistoryServiceMockListResults{ha1, err}
	return e.mock
}

// Times sets number of times HistoryService.List should be invoked
func (mmList *mHistoryServiceMockList) Times(n uint64) *mHistoryServiceMockList {
	if n == 0 {
		mmList.mock.t.Fatalf("Times of HistoryServiceMock.List mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmList.expectedInvocations, n)
	mmList.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmList
}

func (mmList *mHistoryServiceMockList) invocationsDone() bool {
	if len(mmList.expectations) == 0 && mmList.defaultExpectation == nil && mmList.mock.funcList == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmList.mock.afterListCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmList.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// List implements mm_services.HistoryService
func (mmList *HistoryServiceMock) List(ctx context.Context, filter requests.OrderHistoryFilter) (ha1 []models.HistoryEntry, err error) {
	mm_atomic.AddUint64(&mmList.beforeListCounter, 1)
	defer mm_atomic.AddUint64(&mmList.afterListCounter, 1)

	mmList.t.Helper()

	if mmList.inspectFuncList != nil {
		mmList.inspectFuncList(ctx, filter)
	}

	mm_params := HistoryServiceMockListParams{ctx, filter}

	// Record call args
	mmList.ListMock.mutex.Lock()
	mmList.ListMock.callArgs = append(mmList.ListMock.callArgs, &mm_params)
	mmList.ListMock.mutex.Unlock()

	for _, e := range mmList.ListMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ha1, e.results.err
		}
	}

	if mmList.ListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmList.ListMock.defaultExpectation.Counter, 1)
		mm_want := mmList.ListMock.defaultExpectation.params
		mm_want_ptrs := mmList.ListMock.defaultExpectation.paramPtrs

		mm_got := HistoryServiceMockListParams{ctx, filter}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmList.t.Errorf("HistoryServiceMock.List got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmList.ListMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.filter != nil && !minimock.Equal(*mm_want_ptrs.filter, mm_got.filter) {
				mmList.t.Errorf("HistoryServiceMock.List got unexpected parameter filter, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmList.ListMock.defaultExpectation.expectationOrigins.originFilter, *mm_want_ptrs.filter, mm_got.filter, minimock.Diff(*mm_want_ptrs.filter, mm_got.filter))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmList.t.Errorf("HistoryServiceMock.List got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmList.ListMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmList.ListMock.defaultExpectation.results
		if mm_results == nil {
			mmList.t.Fatal("No results are set for the HistoryServiceMock.List")
		}
		return (*mm_results).ha1, (*mm_results).err
	}
	if mmList.funcList != nil {
		return mmList.funcList(ctx, filter)
	}
	mmList.t.Fatalf("Unexpected call to HistoryServiceMock.List. %v %v", ctx, filter)
	return
}

// ListAfterCounter returns a count of finished HistoryServiceMock.List invocations
func (mmList *HistoryServiceMock) ListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmList.afterListCounter)
}

// ListBeforeCounter returns a count of HistoryServiceMock.List invocations
func (mmList *HistoryServiceMock) ListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmList.beforeListCounter)
}

// Calls returns a list of arguments used in each call to HistoryServiceMock.List.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmList *mHistoryServiceMockList) Calls() []*HistoryServiceMockListParams {
	mmList.mutex.RLock()

	argCopy := make([]*HistoryServiceMockListParams, len(mmList.callArgs))
	copy(argCopy, mmList.callArgs)

	mmList.mutex.RUnlock()

	return argCopy
}

// MinimockListDone returns true if the count of the List invocations corresponds
// the number of defined expectations
func (m *HistoryServiceMock) MinimockListDone() bool {
	if m.ListMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ListMock.invocationsDone()
}

// MinimockListInspect logs each unmet expectation
func (m *HistoryServiceMock) MinimockListInspect() {
	for _, e := range m.ListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to HistoryServiceMock.List at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterListCounter := mm_atomic.LoadUint64(&m.afterListCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ListMock.defaultExpectation != nil && afterListCounter < 1 {
		if m.ListMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to HistoryServiceMock.List at\n%s", m.ListMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to HistoryServiceMock.List at\n%s with params: %#v", m.ListMock.defaultExpectation.expectationOrigins.origin, *m.ListMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcList != nil && afterListCounter < 1 {
		m.t.Errorf("Expected call to HistoryServiceMock.List at\n%s", m.funcListOrigin)
	}

	if !m.ListMock.invocationsDone() && afterListCounter > 0 {
		m.t.Errorf("Expected %d calls to HistoryServiceMock.List at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ListMock.expectedInvocations), m.ListMock.expectedInvocationsOrigin, afterListCounter)
	}
}

type mHistoryServiceMockRecord struct {
	optional           bool
	mock               *HistoryServiceMock
	defaultExpectation *HistoryServiceMockRecordExpectation
	expectations       []*HistoryServiceMockRecordExpectation

	callArgs []*HistoryServiceMockRecordParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// HistoryServiceMockRecordExpectation specifies expectation struct of the HistoryService.Record
type HistoryServiceMockRecordExpectation struct {
	mock               *HistoryServiceMock
	params             *HistoryServiceMockRecordParams
	paramPtrs          *HistoryServiceMockRecordParamPtrs
	expectationOrigins HistoryServiceMockRecordExpectationOrigins
	results            *HistoryServiceMockRecordResults
	returnOrigin       string
	Counter            uint64
}

// HistoryServiceMockRecordParams contains parameters of the HistoryService.Record
type HistoryServiceMockRecordParams struct {
	ctx context.Context
	e   models.HistoryEntry
}

// HistoryServiceMockRecordParamPtrs contains pointers to parameters of the HistoryService.Record
type HistoryServiceMockRecordParamPtrs struct {
	ctx *context.Context
	e   *models.HistoryEntry
}

// HistoryServiceMockRecordResults contains results of the HistoryService.Record
type HistoryServiceMockRecordResults struct {
	err error
}

// HistoryServiceMockRecordOrigins contains origins of expectations of the HistoryService.Record
type HistoryServiceMockRecordExpectationOrigins struct {
	origin    string
	originCtx string
	originE   string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmRecord *mHistoryServiceMockRecord) Optional() *mHistoryServiceMockRecord {
	mmRecord.optional = true
	return mmRecord
}

// Expect sets up expected params for HistoryService.Record
func (mmRecord *mHistoryServiceMockRecord) Expect(ctx context.Context, e models.HistoryEntry) *mHistoryServiceMockRecord {
	if mmRecord.mock.funcRecord != nil {
		mmRecord.mock.t.Fatalf("HistoryServiceMock.Record mock is already set by Set")
	}

	if mmRecord.defaultExpectation == nil {
		mmRecord.defaultExpectation = &HistoryServiceMockRecordExpectation{}
	}

	if mmRecord.defaultExpectation.paramPtrs != nil {
		mmRecord.mock.t.Fatalf("HistoryServiceMock.Record mock is already set by ExpectParams functions")
	}

	mmRecord.defaultExpectation.params = &HistoryServiceMockRecordParams{ctx, e}
	mmRecord.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmRecord.expectations {
		if minimock.Equal(e.params, mmRecord.defaultExpectation.params) {
			mmRecord.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRecord.defaultExpectation.params)
		}
	}

	return mmRecord
}

// ExpectCtxParam1 sets up expected param ctx for HistoryService.Record
func (mmRecord *mHistoryServiceMockRecord) ExpectCtxParam1(ctx context.Context) *mHistoryServiceMockRecord {
	if mmRecord.mock.funcRecord != nil {
		mmRecord.mock.t.Fatalf("HistoryServiceMock.Record mock is already set by Set")
	}

	if mmRecord.defaultExpectation == nil {
		mmRecord.defaultExpectation = &HistoryServiceMockRecordExpectation{}
	}

	if mmRecord.defaultExpectation.params != nil {
		mmRecord.mock.t.Fatalf("HistoryServiceMock.Record mock is already set by Expect")
	}

	if mmRecord.defaultExpectation.paramPtrs == nil {
		mmRecord.defaultExpectation.paramPtrs = &HistoryServiceMockRecordParamPtrs{}
	}
	mmRecord.defaultExpectation.paramPtrs.ctx = &ctx
	mmRecord.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmRecord
}

// ExpectEParam2 sets up expected param e for HistoryService.Record
func (mmRecord *mHistoryServiceMockRecord) ExpectEParam2(e models.HistoryEntry) *mHistoryServiceMockRecord {
	if mmRecord.mock.funcRecord != nil {
		mmRecord.mock.t.Fatalf("HistoryServiceMock.Record mock is already set by Set")
	}

	if mmRecord.defaultExpectation == nil {
		mmRecord.defaultExpectation = &HistoryServiceMockRecordExpectation{}
	}

	if mmRecord.defaultExpectation.params != nil {
		mmRecord.mock.t.Fatalf("HistoryServiceMock.Record mock is already set by Expect")
	}

	if mmRecord.defaultExpectation.paramPtrs == nil {
		mmRecord.defaultExpectation.paramPtrs = &HistoryServiceMockRecordParamPtrs{}
	}
	mmRecord.defaultExpectation.paramPtrs.e = &e
	mmRecord.defaultExpectation.expectationOrigins.originE = minimock.CallerInfo(1)

	return mmRecord
}

// Inspect accepts an inspector function that has same arguments as the HistoryService.Record
func (mmRecord *mHistoryServiceMockRecord) Inspect(f func(ctx context.Context, e models.HistoryEntry)) *mHistoryServiceMockRecord {
	if mmRecord.mock.inspectFuncRecord != nil {
		mmRecord.mock.t.Fatalf("Inspect function is already set for HistoryServiceMock.Record")
	}

	mmRecord.mock.inspectFuncRecord = f

	return mmRecord
}

// Return sets up results that will be returned by HistoryService.Record
func (mmRecord *mHistoryServiceMockRecord) Return(err error) *HistoryServiceMock {
	if mmRecord.mock.funcRecord != nil {
		mmRecord.mock.t.Fatalf("HistoryServiceMock.Record mock is already set by Set")
	}

	if mmRecord.defaultExpectation == nil {
		mmRecord.defaultExpectation = &HistoryServiceMockRecordExpectation{mock: mmRecord.mock}
	}
	mmRecord.defaultExpectation.results = &HistoryServiceMockRecordResults{err}
	mmRecord.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmRecord.mock
}

// Set uses given function f to mock the HistoryService.Record method
func (mmRecord *mHistoryServiceMockRecord) Set(f func(ctx context.Context, e models.HistoryEntry) (err error)) *HistoryServiceMock {
	if mmRecord.defaultExpectation != nil {
		mmRecord.mock.t.Fatalf("Default expectation is already set for the HistoryService.Record method")
	}

	if len(mmRecord.expectations) > 0 {
		mmRecord.mock.t.Fatalf("Some expectations are already set for the HistoryService.Record method")
	}

	mmRecord.mock.funcRecord = f
	mmRecord.mock.funcRecordOrigin = minimock.CallerInfo(1)
	return mmRecord.mock
}

// When sets expectation for the HistoryService.Record which will trigger the result defined by the following
// Then helper
func (mmRecord *mHistoryServiceMockRecord) When(ctx context.Context, e models.HistoryEntry) *HistoryServiceMockRecordExpectation {
	if mmRecord.mock.funcRecord != nil {
		mmRecord.mock.t.Fatalf("HistoryServiceMock.Record mock is already set by Set")
	}

	expectation := &HistoryServiceMockRecordExpectation{
		mock:               mmRecord.mock,
		params:             &HistoryServiceMockRecordParams{ctx, e},
		expectationOrigins: HistoryServiceMockRecordExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmRecord.expectations = append(mmRecord.expectations, expectation)
	return expectation
}

// Then sets up HistoryService.Record return parameters for the expectation previously defined by the When method
func (e *HistoryServiceMockRecordExpectation) Then(err error) *HistoryServiceMock {
	e.results = &HistoryServiceMockRecordResults{err}
	return e.mock
}

// Times sets number of times HistoryService.Record should be invoked
func (mmRecord *mHistoryServiceMockRecord) Times(n uint64) *mHistoryServiceMockRecord {
	if n == 0 {
		mmRecord.mock.t.Fatalf("Times of HistoryServiceMock.Record mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmRecord.expectedInvocations, n)
	mmRecord.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmRecord
}

func (mmRecord *mHistoryServiceMockRecord) invocationsDone() bool {
	if len(mmRecord.expectations) == 0 && mmRecord.defaultExpectation == nil && mmRecord.mock.funcRecord == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmRecord.mock.afterRecordCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmRecord.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Record implements mm_services.HistoryService
func (mmRecord *HistoryServiceMock) Record(ctx context.Context, e models.HistoryEntry) (err error) {
	mm_atomic.AddUint64(&mmRecord.beforeRecordCounter, 1)
	defer mm_atomic.AddUint64(&mmRecord.afterRecordCounter, 1)

	mmRecord.t.Helper()

	if mmRecord.inspectFuncRecord != nil {
		mmRecord.inspectFuncRecord(ctx, e)
	}

	mm_params := HistoryServiceMockRecordParams{ctx, e}

	// Record call args
	mmRecord.RecordMock.mutex.Lock()
	mmRecord.RecordMock.callArgs = append(mmRecord.RecordMock.callArgs, &mm_params)
	mmRecord.RecordMock.mutex.Unlock()

	for _, e := range mmRecord.RecordMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmRecord.RecordMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRecord.RecordMock.defaultExpectation.Counter, 1)
		mm_want := mmRecord.RecordMock.defaultExpectation.params
		mm_want_ptrs := mmRecord.RecordMock.defaultExpectation.paramPtrs

		mm_got := HistoryServiceMockRecordParams{ctx, e}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmRecord.t.Errorf("HistoryServiceMock.Record got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmRecord.RecordMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.e != nil && !minimock.Equal(*mm_want_ptrs.e, mm_got.e) {
				mmRecord.t.Errorf("HistoryServiceMock.Record got unexpected parameter e, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmRecord.RecordMock.defaultExpectation.expectationOrigins.originE, *mm_want_ptrs.e, mm_got.e, minimock.Diff(*mm_want_ptrs.e, mm_got.e))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRecord.t.Errorf("HistoryServiceMock.Record got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmRecord.RecordMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRecord.RecordMock.defaultExpectation.results
		if mm_results == nil {
			mmRecord.t.Fatal("No results are set for the HistoryServiceMock.Record")
		}
		return (*mm_results).err
	}
	if mmRecord.funcRecord != nil {
		return mmRecord.funcRecord(ctx, e)
	}
	mmRecord.t.Fatalf("Unexpected call to HistoryServiceMock.Record. %v %v", ctx, e)
	return
}

// RecordAfterCounter returns a count of finished HistoryServiceMock.Record invocations
func (mmRecord *HistoryServiceMock) RecordAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRecord.afterRecordCounter)
}

// RecordBeforeCounter returns a count of HistoryServiceMock.Record invocations
func (mmRecord *HistoryServiceMock) RecordBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRecord.beforeRecordCounter)
}

// Calls returns a list of arguments used in each call to HistoryServiceMock.Record.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRecord *mHistoryServiceMockRecord) Calls() []*HistoryServiceMockRecordParams {
	mmRecord.mutex.RLock()

	argCopy := make([]*HistoryServiceMockRecordParams, len(mmRecord.callArgs))
	copy(argCopy, mmRecord.callArgs)

	mmRecord.mutex.RUnlock()

	return argCopy
}

// MinimockRecordDone returns true if the count of the Record invocations corresponds
// the number of defined expectations
func (m *HistoryServiceMock) MinimockRecordDone() bool {
	if m.RecordMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.RecordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.RecordMock.invocationsDone()
}

// MinimockRecordInspect logs each unmet expectation
func (m *HistoryServiceMock) MinimockRecordInspect() {
	for _, e := range m.RecordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to HistoryServiceMock.Record at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterRecordCounter := mm_atomic.LoadUint64(&m.afterRecordCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.RecordMock.defaultExpectation != nil && afterRecordCounter < 1 {
		if m.RecordMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to HistoryServiceMock.Record at\n%s", m.RecordMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to HistoryServiceMock.Record at\n%s with params: %#v", m.RecordMock.defaultExpectation.expectationOrigins.origin, *m.RecordMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRecord != nil && afterRecordCounter < 1 {
		m.t.Errorf("Expected call to HistoryServiceMock.Record at\n%s", m.funcRecordOrigin)
	}

	if !m.RecordMock.invocationsDone() && afterRecordCounter > 0 {
		m.t.Errorf("Expected %d calls to HistoryServiceMock.Record at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.RecordMock.expectedInvocations), m.RecordMock.expectedInvocationsOrigin, afterRecordCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *HistoryServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockListInspect()

			m.MinimockRecordInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *HistoryServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *HistoryServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockListDone() &&
		m.MinimockRecordDone()
}
