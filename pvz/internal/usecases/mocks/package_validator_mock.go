// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i pvz-cli/internal/usecases/services/validators.PackageValidator -o package_validator_mock.go -n PackageValidatorMock -p mocks

import (
	"pvz-cli/internal/models"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// PackageValidatorMock implements mm_validators.PackageValidator
type PackageValidatorMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcValidate          func(pkg models.PackageType, weight float32) (err error)
	funcValidateOrigin    string
	inspectFuncValidate   func(pkg models.PackageType, weight float32)
	afterValidateCounter  uint64
	beforeValidateCounter uint64
	ValidateMock          mPackageValidatorMockValidate
}

// NewPackageValidatorMock returns a mock for mm_validators.PackageValidator
func NewPackageValidatorMock(t minimock.Tester) *PackageValidatorMock {
	m := &PackageValidatorMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ValidateMock = mPackageValidatorMockValidate{mock: m}
	m.ValidateMock.callArgs = []*PackageValidatorMockValidateParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mPackageValidatorMockValidate struct {
	optional           bool
	mock               *PackageValidatorMock
	defaultExpectation *PackageValidatorMockValidateExpectation
	expectations       []*PackageValidatorMockValidateExpectation

	callArgs []*PackageValidatorMockValidateParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// PackageValidatorMockValidateExpectation specifies expectation struct of the PackageValidator.Validate
type PackageValidatorMockValidateExpectation struct {
	mock               *PackageValidatorMock
	params             *PackageValidatorMockValidateParams
	paramPtrs          *PackageValidatorMockValidateParamPtrs
	expectationOrigins PackageValidatorMockValidateExpectationOrigins
	results            *PackageValidatorMockValidateResults
	returnOrigin       string
	Counter            uint64
}

// PackageValidatorMockValidateParams contains parameters of the PackageValidator.Validate
type PackageValidatorMockValidateParams struct {
	pkg    models.PackageType
	weight float32
}

// PackageValidatorMockValidateParamPtrs contains pointers to parameters of the PackageValidator.Validate
type PackageValidatorMockValidateParamPtrs struct {
	pkg    *models.PackageType
	weight *float32
}

// PackageValidatorMockValidateResults contains results of the PackageValidator.Validate
type PackageValidatorMockValidateResults struct {
	err error
}

// PackageValidatorMockValidateOrigins contains origins of expectations of the PackageValidator.Validate
type PackageValidatorMockValidateExpectationOrigins struct {
	origin       string
	originPkg    string
	originWeight string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmValidate *mPackageValidatorMockValidate) Optional() *mPackageValidatorMockValidate {
	mmValidate.optional = true
	return mmValidate
}

// Expect sets up expected params for PackageValidator.Validate
func (mmValidate *mPackageValidatorMockValidate) Expect(pkg models.PackageType, weight float32) *mPackageValidatorMockValidate {
	if mmValidate.mock.funcValidate != nil {
		mmValidate.mock.t.Fatalf("PackageValidatorMock.Validate mock is already set by Set")
	}

	if mmValidate.defaultExpectation == nil {
		mmValidate.defaultExpectation = &PackageValidatorMockValidateExpectation{}
	}

	if mmValidate.defaultExpectation.paramPtrs != nil {
		mmValidate.mock.t.Fatalf("PackageValidatorMock.Validate mock is already set by ExpectParams functions")
	}

	mmValidate.defaultExpectation.params = &PackageValidatorMockValidateParams{pkg, weight}
	mmValidate.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmValidate.expectations {
		if minimock.Equal(e.params, mmValidate.defaultExpectation.params) {
			mmValidate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmValidate.defaultExpectation.params)
		}
	}

	return mmValidate
}

// ExpectPkgParam1 sets up expected param pkg for PackageValidator.Validate
func (mmValidate *mPackageValidatorMockValidate) ExpectPkgParam1(pkg models.PackageType) *mPackageValidatorMockValidate {
	if mmValidate.mock.funcValidate != nil {
		mmValidate.mock.t.Fatalf("PackageValidatorMock.Validate mock is already set by Set")
	}

	if mmValidate.defaultExpectation == nil {
		mmValidate.defaultExpectation = &PackageValidatorMockValidateExpectation{}
	}

	if mmValidate.defaultExpectation.params != nil {
		mmValidate.mock.t.Fatalf("PackageValidatorMock.Validate mock is already set by Expect")
	}

	if mmValidate.defaultExpectation.paramPtrs == nil {
		mmValidate.defaultExpectation.paramPtrs = &PackageValidatorMockValidateParamPtrs{}
	}
	mmValidate.defaultExpectation.paramPtrs.pkg = &pkg
	mmValidate.defaultExpectation.expectationOrigins.originPkg = minimock.CallerInfo(1)

	return mmValidate
}

// ExpectWeightParam2 sets up expected param weight for PackageValidator.Validate
func (mmValidate *mPackageValidatorMockValidate) ExpectWeightParam2(weight float32) *mPackageValidatorMockValidate {
	if mmValidate.mock.funcValidate != nil {
		mmValidate.mock.t.Fatalf("PackageValidatorMock.Validate mock is already set by Set")
	}

	if mmValidate.defaultExpectation == nil {
		mmValidate.defaultExpectation = &PackageValidatorMockValidateExpectation{}
	}

	if mmValidate.defaultExpectation.params != nil {
		mmValidate.mock.t.Fatalf("PackageValidatorMock.Validate mock is already set by Expect")
	}

	if mmValidate.defaultExpectation.paramPtrs == nil {
		mmValidate.defaultExpectation.paramPtrs = &PackageValidatorMockValidateParamPtrs{}
	}
	mmValidate.defaultExpectation.paramPtrs.weight = &weight
	mmValidate.defaultExpectation.expectationOrigins.originWeight = minimock.CallerInfo(1)

	return mmValidate
}

// Inspect accepts an inspector function that has same arguments as the PackageValidator.Validate
func (mmValidate *mPackageValidatorMockValidate) Inspect(f func(pkg models.PackageType, weight float32)) *mPackageValidatorMockValidate {
	if mmValidate.mock.inspectFuncValidate != nil {
		mmValidate.mock.t.Fatalf("Inspect function is already set for PackageValidatorMock.Validate")
	}

	mmValidate.mock.inspectFuncValidate = f

	return mmValidate
}

// Return sets up results that will be returned by PackageValidator.Validate
func (mmValidate *mPackageValidatorMockValidate) Return(err error) *PackageValidatorMock {
	if mmValidate.mock.funcValidate != nil {
		mmValidate.mock.t.Fatalf("PackageValidatorMock.Validate mock is already set by Set")
	}

	if mmValidate.defaultExpectation == nil {
		mmValidate.defaultExpectation = &PackageValidatorMockValidateExpectation{mock: mmValidate.mock}
	}
	mmValidate.defaultExpectation.results = &PackageValidatorMockValidateResults{err}
	mmValidate.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmValidate.mock
}

// Set uses given function f to mock the PackageValidator.Validate method
func (mmValidate *mPackageValidatorMockValidate) Set(f func(pkg models.PackageType, weight float32) (err error)) *PackageValidatorMock {
	if mmValidate.defaultExpectation != nil {
		mmValidate.mock.t.Fatalf("Default expectation is already set for the PackageValidator.Validate method")
	}

	if len(mmValidate.expectations) > 0 {
		mmValidate.mock.t.Fatalf("Some expectations are already set for the PackageValidator.Validate method")
	}

	mmValidate.mock.funcValidate = f
	mmValidate.mock.funcValidateOrigin = minimock.CallerInfo(1)
	return mmValidate.mock
}

// When sets expectation for the PackageValidator.Validate which will trigger the result defined by the following
// Then helper
func (mmValidate *mPackageValidatorMockValidate) When(pkg models.PackageType, weight float32) *PackageValidatorMockValidateExpectation {
	if mmValidate.mock.funcValidate != nil {
		mmValidate.mock.t.Fatalf("PackageValidatorMock.Validate mock is already set by Set")
	}

	expectation := &PackageValidatorMockValidateExpectation{
		mock:               mmValidate.mock,
		params:             &PackageValidatorMockValidateParams{pkg, weight},
		expectationOrigins: PackageValidatorMockValidateExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmValidate.expectations = append(mmValidate.expectations, expectation)
	return expectation
}

// Then sets up PackageValidator.Validate return parameters for the expectation previously defined by the When method
func (e *PackageValidatorMockValidateExpectation) Then(err error) *PackageValidatorMock {
	e.results = &PackageValidatorMockValidateResults{err}
	return e.mock
}

// Times sets number of times PackageValidator.Validate should be invoked
func (mmValidate *mPackageValidatorMockValidate) Times(n uint64) *mPackageValidatorMockValidate {
	if n == 0 {
		mmValidate.mock.t.Fatalf("Times of PackageValidatorMock.Validate mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmValidate.expectedInvocations, n)
	mmValidate.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmValidate
}

func (mmValidate *mPackageValidatorMockValidate) invocationsDone() bool {
	if len(mmValidate.expectations) == 0 && mmValidate.defaultExpectation == nil && mmValidate.mock.funcValidate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmValidate.mock.afterValidateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmValidate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Validate implements mm_validators.PackageValidator
func (mmValidate *PackageValidatorMock) Validate(pkg models.PackageType, weight float32) (err error) {
	mm_atomic.AddUint64(&mmValidate.beforeValidateCounter, 1)
	defer mm_atomic.AddUint64(&mmValidate.afterValidateCounter, 1)

	mmValidate.t.Helper()

	if mmValidate.inspectFuncValidate != nil {
		mmValidate.inspectFuncValidate(pkg, weight)
	}

	mm_params := PackageValidatorMockValidateParams{pkg, weight}

	// Record call args
	mmValidate.ValidateMock.mutex.Lock()
	mmValidate.ValidateMock.callArgs = append(mmValidate.ValidateMock.callArgs, &mm_params)
	mmValidate.ValidateMock.mutex.Unlock()

	for _, e := range mmValidate.ValidateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmValidate.ValidateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmValidate.ValidateMock.defaultExpectation.Counter, 1)
		mm_want := mmValidate.ValidateMock.defaultExpectation.params
		mm_want_ptrs := mmValidate.ValidateMock.defaultExpectation.paramPtrs

		mm_got := PackageValidatorMockValidateParams{pkg, weight}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.pkg != nil && !minimock.Equal(*mm_want_ptrs.pkg, mm_got.pkg) {
				mmValidate.t.Errorf("PackageValidatorMock.Validate got unexpected parameter pkg, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmValidate.ValidateMock.defaultExpectation.expectationOrigins.originPkg, *mm_want_ptrs.pkg, mm_got.pkg, minimock.Diff(*mm_want_ptrs.pkg, mm_got.pkg))
			}

			if mm_want_ptrs.weight != nil && !minimock.Equal(*mm_want_ptrs.weight, mm_got.weight) {
				mmValidate.t.Errorf("PackageValidatorMock.Validate got unexpected parameter weight, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmValidate.ValidateMock.defaultExpectation.expectationOrigins.originWeight, *mm_want_ptrs.weight, mm_got.weight, minimock.Diff(*mm_want_ptrs.weight, mm_got.weight))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmValidate.t.Errorf("PackageValidatorMock.Validate got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmValidate.ValidateMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmValidate.ValidateMock.defaultExpectation.results
		if mm_results == nil {
			mmValidate.t.Fatal("No results are set for the PackageValidatorMock.Validate")
		}
		return (*mm_results).err
	}
	if mmValidate.funcValidate != nil {
		return mmValidate.funcValidate(pkg, weight)
	}
	mmValidate.t.Fatalf("Unexpected call to PackageValidatorMock.Validate. %v %v", pkg, weight)
	return
}

// ValidateAfterCounter returns a count of finished PackageValidatorMock.Validate invocations
func (mmValidate *PackageValidatorMock) ValidateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmValidate.afterValidateCounter)
}

// ValidateBeforeCounter returns a count of PackageValidatorMock.Validate invocations
func (mmValidate *PackageValidatorMock) ValidateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmValidate.beforeValidateCounter)
}

// Calls returns a list of arguments used in each call to PackageValidatorMock.Validate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmValidate *mPackageValidatorMockValidate) Calls() []*PackageValidatorMockValidateParams {
	mmValidate.mutex.RLock()

	argCopy := make([]*PackageValidatorMockValidateParams, len(mmValidate.callArgs))
	copy(argCopy, mmValidate.callArgs)

	mmValidate.mutex.RUnlock()

	return argCopy
}

// MinimockValidateDone returns true if the count of the Validate invocations corresponds
// the number of defined expectations
func (m *PackageValidatorMock) MinimockValidateDone() bool {
	if m.ValidateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ValidateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ValidateMock.invocationsDone()
}

// MinimockValidateInspect logs each unmet expectation
func (m *PackageValidatorMock) MinimockValidateInspect() {
	for _, e := range m.ValidateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PackageValidatorMock.Validate at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterValidateCounter := mm_atomic.LoadUint64(&m.afterValidateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ValidateMock.defaultExpectation != nil && afterValidateCounter < 1 {
		if m.ValidateMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to PackageValidatorMock.Validate at\n%s", m.ValidateMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to PackageValidatorMock.Validate at\n%s with params: %#v", m.ValidateMock.defaultExpectation.expectationOrigins.origin, *m.ValidateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcValidate != nil && afterValidateCounter < 1 {
		m.t.Errorf("Expected call to PackageValidatorMock.Validate at\n%s", m.funcValidateOrigin)
	}

	if !m.ValidateMock.invocationsDone() && afterValidateCounter > 0 {
		m.t.Errorf("Expected %d calls to PackageValidatorMock.Validate at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ValidateMock.expectedInvocations), m.ValidateMock.expectedInvocationsOrigin, afterValidateCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *PackageValidatorMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockValidateInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *PackageValidatorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *PackageValidatorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockValidateDone()
}
