// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

import (
	"context"
	"pvz-cli/internal/models"
	"pvz-cli/internal/usecases/requests"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// HistoryRepositoryMock implements mm_repositories.HistoryRepository
type HistoryRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcList          func(ctx context.Context, filter requests.OrderHistoryFilter) (ha1 []models.HistoryEntry, i1 int, err error)
	funcListOrigin    string
	inspectFuncList   func(ctx context.Context, filter requests.OrderHistoryFilter)
	afterListCounter  uint64
	beforeListCounter uint64
	ListMock          mHistoryRepositoryMockList

	funcSave          func(ctx context.Context, e models.HistoryEntry) (err error)
	funcSaveOrigin    string
	inspectFuncSave   func(ctx context.Context, e models.HistoryEntry)
	afterSaveCounter  uint64
	beforeSaveCounter uint64
	SaveMock          mHistoryRepositoryMockSave
}

// NewHistoryRepositoryMock returns a mock for mm_repositories.HistoryRepository
func NewHistoryRepositoryMock(t minimock.Tester) *HistoryRepositoryMock {
	m := &HistoryRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ListMock = mHistoryRepositoryMockList{mock: m}
	m.ListMock.callArgs = []*HistoryRepositoryMockListParams{}

	m.SaveMock = mHistoryRepositoryMockSave{mock: m}
	m.SaveMock.callArgs = []*HistoryRepositoryMockSaveParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mHistoryRepositoryMockList struct {
	optional           bool
	mock               *HistoryRepositoryMock
	defaultExpectation *HistoryRepositoryMockListExpectation
	expectations       []*HistoryRepositoryMockListExpectation

	callArgs []*HistoryRepositoryMockListParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// HistoryRepositoryMockListExpectation specifies expectation struct of the HistoryRepository.List
type HistoryRepositoryMockListExpectation struct {
	mock               *HistoryRepositoryMock
	params             *HistoryRepositoryMockListParams
	paramPtrs          *HistoryRepositoryMockListParamPtrs
	expectationOrigins HistoryRepositoryMockListExpectationOrigins
	results            *HistoryRepositoryMockListResults
	returnOrigin       string
	Counter            uint64
}

// HistoryRepositoryMockListParams contains parameters of the HistoryRepository.List
type HistoryRepositoryMockListParams struct {
	ctx    context.Context
	filter requests.OrderHistoryFilter
}

// HistoryRepositoryMockListParamPtrs contains pointers to parameters of the HistoryRepository.List
type HistoryRepositoryMockListParamPtrs struct {
	ctx    *context.Context
	filter *requests.OrderHistoryFilter
}

// HistoryRepositoryMockListResults contains results of the HistoryRepository.List
type HistoryRepositoryMockListResults struct {
	ha1 []models.HistoryEntry
	i1  int
	err error
}

// HistoryRepositoryMockListOrigins contains origins of expectations of the HistoryRepository.List
type HistoryRepositoryMockListExpectationOrigins struct {
	origin       string
	originCtx    string
	originFilter string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmList *mHistoryRepositoryMockList) Optional() *mHistoryRepositoryMockList {
	mmList.optional = true
	return mmList
}

// Expect sets up expected params for HistoryRepository.List
func (mmList *mHistoryRepositoryMockList) Expect(ctx context.Context, filter requests.OrderHistoryFilter) *mHistoryRepositoryMockList {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("HistoryRepositoryMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &HistoryRepositoryMockListExpectation{}
	}

	if mmList.defaultExpectation.paramPtrs != nil {
		mmList.mock.t.Fatalf("HistoryRepositoryMock.List mock is already set by ExpectParams functions")
	}

	mmList.defaultExpectation.params = &HistoryRepositoryMockListParams{ctx, filter}
	mmList.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmList.expectations {
		if minimock.Equal(e.params, mmList.defaultExpectation.params) {
			mmList.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmList.defaultExpectation.params)
		}
	}

	return mmList
}

// ExpectCtxParam1 sets up expected param ctx for HistoryRepository.List
func (mmList *mHistoryRepositoryMockList) ExpectCtxParam1(ctx context.Context) *mHistoryRepositoryMockList {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("HistoryRepositoryMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &HistoryRepositoryMockListExpectation{}
	}

	if mmList.defaultExpectation.params != nil {
		mmList.mock.t.Fatalf("HistoryRepositoryMock.List mock is already set by Expect")
	}

	if mmList.defaultExpectation.paramPtrs == nil {
		mmList.defaultExpectation.paramPtrs = &HistoryRepositoryMockListParamPtrs{}
	}
	mmList.defaultExpectation.paramPtrs.ctx = &ctx
	mmList.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmList
}

// ExpectFilterParam2 sets up expected param filter for HistoryRepository.List
func (mmList *mHistoryRepositoryMockList) ExpectFilterParam2(filter requests.OrderHistoryFilter) *mHistoryRepositoryMockList {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("HistoryRepositoryMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &HistoryRepositoryMockListExpectation{}
	}

	if mmList.defaultExpectation.params != nil {
		mmList.mock.t.Fatalf("HistoryRepositoryMock.List mock is already set by Expect")
	}

	if mmList.defaultExpectation.paramPtrs == nil {
		mmList.defaultExpectation.paramPtrs = &HistoryRepositoryMockListParamPtrs{}
	}
	mmList.defaultExpectation.paramPtrs.filter = &filter
	mmList.defaultExpectation.expectationOrigins.originFilter = minimock.CallerInfo(1)

	return mmList
}

// Inspect accepts an inspector function that has same arguments as the HistoryRepository.List
func (mmList *mHistoryRepositoryMockList) Inspect(f func(ctx context.Context, filter requests.OrderHistoryFilter)) *mHistoryRepositoryMockList {
	if mmList.mock.inspectFuncList != nil {
		mmList.mock.t.Fatalf("Inspect function is already set for HistoryRepositoryMock.List")
	}

	mmList.mock.inspectFuncList = f

	return mmList
}

// Return sets up results that will be returned by HistoryRepository.List
func (mmList *mHistoryRepositoryMockList) Return(ha1 []models.HistoryEntry, i1 int, err error) *HistoryRepositoryMock {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("HistoryRepositoryMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &HistoryRepositoryMockListExpectation{mock: mmList.mock}
	}
	mmList.defaultExpectation.results = &HistoryRepositoryMockListResults{ha1, i1, err}
	mmList.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmList.mock
}

// Set uses given function f to mock the HistoryRepository.List method
func (mmList *mHistoryRepositoryMockList) Set(f func(ctx context.Context, filter requests.OrderHistoryFilter) (ha1 []models.HistoryEntry, i1 int, err error)) *HistoryRepositoryMock {
	if mmList.defaultExpectation != nil {
		mmList.mock.t.Fatalf("Default expectation is already set for the HistoryRepository.List method")
	}

	if len(mmList.expectations) > 0 {
		mmList.mock.t.Fatalf("Some expectations are already set for the HistoryRepository.List method")
	}

	mmList.mock.funcList = f
	mmList.mock.funcListOrigin = minimock.CallerInfo(1)
	return mmList.mock
}

// When sets expectation for the HistoryRepository.List which will trigger the result defined by the following
// Then helper
func (mmList *mHistoryRepositoryMockList) When(ctx context.Context, filter requests.OrderHistoryFilter) *HistoryRepositoryMockListExpectation {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("HistoryRepositoryMock.List mock is already set by Set")
	}

	expectation := &HistoryRepositoryMockListExpectation{
		mock:               mmList.mock,
		params:             &HistoryRepositoryMockListParams{ctx, filter},
		expectationOrigins: HistoryRepositoryMockListExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmList.expectations = append(mmList.expectations, expectation)
	return expectation
}

// Then sets up HistoryRepository.List return parameters for the expectation previously defined by the When method
func (e *HistoryRepositoryMockListExpectation) Then(ha1 []models.HistoryEntry, i1 int, err error) *HistoryRepositoryMock {
	e.results = &HistoryRepositoryMockListResults{ha1, i1, err}
	return e.mock
}

// Times sets number of times HistoryRepository.List should be invoked
func (mmList *mHistoryRepositoryMockList) Times(n uint64) *mHistoryRepositoryMockList {
	if n == 0 {
		mmList.mock.t.Fatalf("Times of HistoryRepositoryMock.List mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmList.expectedInvocations, n)
	mmList.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmList
}

func (mmList *mHistoryRepositoryMockList) invocationsDone() bool {
	if len(mmList.expectations) == 0 && mmList.defaultExpectation == nil && mmList.mock.funcList == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmList.mock.afterListCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmList.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// List implements mm_repositories.HistoryRepository
func (mmList *HistoryRepositoryMock) List(ctx context.Context, filter requests.OrderHistoryFilter) (ha1 []models.HistoryEntry, i1 int, err error) {
	mm_atomic.AddUint64(&mmList.beforeListCounter, 1)
	defer mm_atomic.AddUint64(&mmList.afterListCounter, 1)

	mmList.t.Helper()

	if mmList.inspectFuncList != nil {
		mmList.inspectFuncList(ctx, filter)
	}

	mm_params := HistoryRepositoryMockListParams{ctx, filter}

	// Record call args
	mmList.ListMock.mutex.Lock()
	mmList.ListMock.callArgs = append(mmList.ListMock.callArgs, &mm_params)
	mmList.ListMock.mutex.Unlock()

	for _, e := range mmList.ListMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ha1, e.results.i1, e.results.err
		}
	}

	if mmList.ListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmList.ListMock.defaultExpectation.Counter, 1)
		mm_want := mmList.ListMock.defaultExpectation.params
		mm_want_ptrs := mmList.ListMock.defaultExpectation.paramPtrs

		mm_got := HistoryRepositoryMockListParams{ctx, filter}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmList.t.Errorf("HistoryRepositoryMock.List got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmList.ListMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.filter != nil && !minimock.Equal(*mm_want_ptrs.filter, mm_got.filter) {
				mmList.t.Errorf("HistoryRepositoryMock.List got unexpected parameter filter, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmList.ListMock.defaultExpectation.expectationOrigins.originFilter, *mm_want_ptrs.filter, mm_got.filter, minimock.Diff(*mm_want_ptrs.filter, mm_got.filter))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmList.t.Errorf("HistoryRepositoryMock.List got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmList.ListMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmList.ListMock.defaultExpectation.results
		if mm_results == nil {
			mmList.t.Fatal("No results are set for the HistoryRepositoryMock.List")
		}
		return (*mm_results).ha1, (*mm_results).i1, (*mm_results).err
	}
	if mmList.funcList != nil {
		return mmList.funcList(ctx, filter)
	}
	mmList.t.Fatalf("Unexpected call to HistoryRepositoryMock.List. %v %v", ctx, filter)
	return
}

// ListAfterCounter returns a count of finished HistoryRepositoryMock.List invocations
func (mmList *HistoryRepositoryMock) ListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmList.afterListCounter)
}

// ListBeforeCounter returns a count of HistoryRepositoryMock.List invocations
func (mmList *HistoryRepositoryMock) ListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmList.beforeListCounter)
}

// Calls returns a list of arguments used in each call to HistoryRepositoryMock.List.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmList *mHistoryRepositoryMockList) Calls() []*HistoryRepositoryMockListParams {
	mmList.mutex.RLock()

	argCopy := make([]*HistoryRepositoryMockListParams, len(mmList.callArgs))
	copy(argCopy, mmList.callArgs)

	mmList.mutex.RUnlock()

	return argCopy
}

// MinimockListDone returns true if the count of the List invocations corresponds
// the number of defined expectations
func (m *HistoryRepositoryMock) MinimockListDone() bool {
	if m.ListMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ListMock.invocationsDone()
}

// MinimockListInspect logs each unmet expectation
func (m *HistoryRepositoryMock) MinimockListInspect() {
	for _, e := range m.ListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to HistoryRepositoryMock.List at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterListCounter := mm_atomic.LoadUint64(&m.afterListCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ListMock.defaultExpectation != nil && afterListCounter < 1 {
		if m.ListMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to HistoryRepositoryMock.List at\n%s", m.ListMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to HistoryRepositoryMock.List at\n%s with params: %#v", m.ListMock.defaultExpectation.expectationOrigins.origin, *m.ListMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcList != nil && afterListCounter < 1 {
		m.t.Errorf("Expected call to HistoryRepositoryMock.List at\n%s", m.funcListOrigin)
	}

	if !m.ListMock.invocationsDone() && afterListCounter > 0 {
		m.t.Errorf("Expected %d calls to HistoryRepositoryMock.List at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ListMock.expectedInvocations), m.ListMock.expectedInvocationsOrigin, afterListCounter)
	}
}

type mHistoryRepositoryMockSave struct {
	optional           bool
	mock               *HistoryRepositoryMock
	defaultExpectation *HistoryRepositoryMockSaveExpectation
	expectations       []*HistoryRepositoryMockSaveExpectation

	callArgs []*HistoryRepositoryMockSaveParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// HistoryRepositoryMockSaveExpectation specifies expectation struct of the HistoryRepository.Save
type HistoryRepositoryMockSaveExpectation struct {
	mock               *HistoryRepositoryMock
	params             *HistoryRepositoryMockSaveParams
	paramPtrs          *HistoryRepositoryMockSaveParamPtrs
	expectationOrigins HistoryRepositoryMockSaveExpectationOrigins
	results            *HistoryRepositoryMockSaveResults
	returnOrigin       string
	Counter            uint64
}

// HistoryRepositoryMockSaveParams contains parameters of the HistoryRepository.Save
type HistoryRepositoryMockSaveParams struct {
	ctx context.Context
	e   models.HistoryEntry
}

// HistoryRepositoryMockSaveParamPtrs contains pointers to parameters of the HistoryRepository.Save
type HistoryRepositoryMockSaveParamPtrs struct {
	ctx *context.Context
	e   *models.HistoryEntry
}

// HistoryRepositoryMockSaveResults contains results of the HistoryRepository.Save
type HistoryRepositoryMockSaveResults struct {
	err error
}

// HistoryRepositoryMockSaveOrigins contains origins of expectations of the HistoryRepository.Save
type HistoryRepositoryMockSaveExpectationOrigins struct {
	origin    string
	originCtx string
	originE   string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSave *mHistoryRepositoryMockSave) Optional() *mHistoryRepositoryMockSave {
	mmSave.optional = true
	return mmSave
}

// Expect sets up expected params for HistoryRepository.Save
func (mmSave *mHistoryRepositoryMockSave) Expect(ctx context.Context, e models.HistoryEntry) *mHistoryRepositoryMockSave {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("HistoryRepositoryMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &HistoryRepositoryMockSaveExpectation{}
	}

	if mmSave.defaultExpectation.paramPtrs != nil {
		mmSave.mock.t.Fatalf("HistoryRepositoryMock.Save mock is already set by ExpectParams functions")
	}

	mmSave.defaultExpectation.params = &HistoryRepositoryMockSaveParams{ctx, e}
	mmSave.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSave.expectations {
		if minimock.Equal(e.params, mmSave.defaultExpectation.params) {
			mmSave.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSave.defaultExpectation.params)
		}
	}

	return mmSave
}

// ExpectCtxParam1 sets up expected param ctx for HistoryRepository.Save
func (mmSave *mHistoryRepositoryMockSave) ExpectCtxParam1(ctx context.Context) *mHistoryRepositoryMockSave {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("HistoryRepositoryMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &HistoryRepositoryMockSaveExpectation{}
	}

	if mmSave.defaultExpectation.params != nil {
		mmSave.mock.t.Fatalf("HistoryRepositoryMock.Save mock is already set by Expect")
	}

	if mmSave.defaultExpectation.paramPtrs == nil {
		mmSave.defaultExpectation.paramPtrs = &HistoryRepositoryMockSaveParamPtrs{}
	}
	mmSave.defaultExpectation.paramPtrs.ctx = &ctx
	mmSave.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmSave
}

// ExpectEParam2 sets up expected param e for HistoryRepository.Save
func (mmSave *mHistoryRepositoryMockSave) ExpectEParam2(e models.HistoryEntry) *mHistoryRepositoryMockSave {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("HistoryRepositoryMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &HistoryRepositoryMockSaveExpectation{}
	}

	if mmSave.defaultExpectation.params != nil {
		mmSave.mock.t.Fatalf("HistoryRepositoryMock.Save mock is already set by Expect")
	}

	if mmSave.defaultExpectation.paramPtrs == nil {
		mmSave.defaultExpectation.paramPtrs = &HistoryRepositoryMockSaveParamPtrs{}
	}
	mmSave.defaultExpectation.paramPtrs.e = &e
	mmSave.defaultExpectation.expectationOrigins.originE = minimock.CallerInfo(1)

	return mmSave
}

// Inspect accepts an inspector function that has same arguments as the HistoryRepository.Save
func (mmSave *mHistoryRepositoryMockSave) Inspect(f func(ctx context.Context, e models.HistoryEntry)) *mHistoryRepositoryMockSave {
	if mmSave.mock.inspectFuncSave != nil {
		mmSave.mock.t.Fatalf("Inspect function is already set for HistoryRepositoryMock.Save")
	}

	mmSave.mock.inspectFuncSave = f

	return mmSave
}

// Return sets up results that will be returned by HistoryRepository.Save
func (mmSave *mHistoryRepositoryMockSave) Return(err error) *HistoryRepositoryMock {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("HistoryRepositoryMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &HistoryRepositoryMockSaveExpectation{mock: mmSave.mock}
	}
	mmSave.defaultExpectation.results = &HistoryRepositoryMockSaveResults{err}
	mmSave.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSave.mock
}

// Set uses given function f to mock the HistoryRepository.Save method
func (mmSave *mHistoryRepositoryMockSave) Set(f func(ctx context.Context, e models.HistoryEntry) (err error)) *HistoryRepositoryMock {
	if mmSave.defaultExpectation != nil {
		mmSave.mock.t.Fatalf("Default expectation is already set for the HistoryRepository.Save method")
	}

	if len(mmSave.expectations) > 0 {
		mmSave.mock.t.Fatalf("Some expectations are already set for the HistoryRepository.Save method")
	}

	mmSave.mock.funcSave = f
	mmSave.mock.funcSaveOrigin = minimock.CallerInfo(1)
	return mmSave.mock
}

// When sets expectation for the HistoryRepository.Save which will trigger the result defined by the following
// Then helper
func (mmSave *mHistoryRepositoryMockSave) When(ctx context.Context, e models.HistoryEntry) *HistoryRepositoryMockSaveExpectation {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("HistoryRepositoryMock.Save mock is already set by Set")
	}

	expectation := &HistoryRepositoryMockSaveExpectation{
		mock:               mmSave.mock,
		params:             &HistoryRepositoryMockSaveParams{ctx, e},
		expectationOrigins: HistoryRepositoryMockSaveExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSave.expectations = append(mmSave.expectations, expectation)
	return expectation
}

// Then sets up HistoryRepository.Save return parameters for the expectation previously defined by the When method
func (e *HistoryRepositoryMockSaveExpectation) Then(err error) *HistoryRepositoryMock {
	e.results = &HistoryRepositoryMockSaveResults{err}
	return e.mock
}

// Times sets number of times HistoryRepository.Save should be invoked
func (mmSave *mHistoryRepositoryMockSave) Times(n uint64) *mHistoryRepositoryMockSave {
	if n == 0 {
		mmSave.mock.t.Fatalf("Times of HistoryRepositoryMock.Save mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSave.expectedInvocations, n)
	mmSave.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSave
}

func (mmSave *mHistoryRepositoryMockSave) invocationsDone() bool {
	if len(mmSave.expectations) == 0 && mmSave.defaultExpectation == nil && mmSave.mock.funcSave == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSave.mock.afterSaveCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSave.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Save implements mm_repositories.HistoryRepository
func (mmSave *HistoryRepositoryMock) Save(ctx context.Context, e models.HistoryEntry) (err error) {
	mm_atomic.AddUint64(&mmSave.beforeSaveCounter, 1)
	defer mm_atomic.AddUint64(&mmSave.afterSaveCounter, 1)

	mmSave.t.Helper()

	if mmSave.inspectFuncSave != nil {
		mmSave.inspectFuncSave(ctx, e)
	}

	mm_params := HistoryRepositoryMockSaveParams{ctx, e}

	// Record call args
	mmSave.SaveMock.mutex.Lock()
	mmSave.SaveMock.callArgs = append(mmSave.SaveMock.callArgs, &mm_params)
	mmSave.SaveMock.mutex.Unlock()

	for _, e := range mmSave.SaveMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSave.SaveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSave.SaveMock.defaultExpectation.Counter, 1)
		mm_want := mmSave.SaveMock.defaultExpectation.params
		mm_want_ptrs := mmSave.SaveMock.defaultExpectation.paramPtrs

		mm_got := HistoryRepositoryMockSaveParams{ctx, e}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSave.t.Errorf("HistoryRepositoryMock.Save got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSave.SaveMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.e != nil && !minimock.Equal(*mm_want_ptrs.e, mm_got.e) {
				mmSave.t.Errorf("HistoryRepositoryMock.Save got unexpected parameter e, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSave.SaveMock.defaultExpectation.expectationOrigins.originE, *mm_want_ptrs.e, mm_got.e, minimock.Diff(*mm_want_ptrs.e, mm_got.e))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSave.t.Errorf("HistoryRepositoryMock.Save got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSave.SaveMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSave.SaveMock.defaultExpectation.results
		if mm_results == nil {
			mmSave.t.Fatal("No results are set for the HistoryRepositoryMock.Save")
		}
		return (*mm_results).err
	}
	if mmSave.funcSave != nil {
		return mmSave.funcSave(ctx, e)
	}
	mmSave.t.Fatalf("Unexpected call to HistoryRepositoryMock.Save. %v %v", ctx, e)
	return
}

// SaveAfterCounter returns a count of finished HistoryRepositoryMock.Save invocations
func (mmSave *HistoryRepositoryMock) SaveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSave.afterSaveCounter)
}

// SaveBeforeCounter returns a count of HistoryRepositoryMock.Save invocations
func (mmSave *HistoryRepositoryMock) SaveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSave.beforeSaveCounter)
}

// Calls returns a list of arguments used in each call to HistoryRepositoryMock.Save.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSave *mHistoryRepositoryMockSave) Calls() []*HistoryRepositoryMockSaveParams {
	mmSave.mutex.RLock()

	argCopy := make([]*HistoryRepositoryMockSaveParams, len(mmSave.callArgs))
	copy(argCopy, mmSave.callArgs)

	mmSave.mutex.RUnlock()

	return argCopy
}

// MinimockSaveDone returns true if the count of the Save invocations corresponds
// the number of defined expectations
func (m *HistoryRepositoryMock) MinimockSaveDone() bool {
	if m.SaveMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SaveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SaveMock.invocationsDone()
}

// MinimockSaveInspect logs each unmet expectation
func (m *HistoryRepositoryMock) MinimockSaveInspect() {
	for _, e := range m.SaveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to HistoryRepositoryMock.Save at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSaveCounter := mm_atomic.LoadUint64(&m.afterSaveCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SaveMock.defaultExpectation != nil && afterSaveCounter < 1 {
		if m.SaveMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to HistoryRepositoryMock.Save at\n%s", m.SaveMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to HistoryRepositoryMock.Save at\n%s with params: %#v", m.SaveMock.defaultExpectation.expectationOrigins.origin, *m.SaveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSave != nil && afterSaveCounter < 1 {
		m.t.Errorf("Expected call to HistoryRepositoryMock.Save at\n%s", m.funcSaveOrigin)
	}

	if !m.SaveMock.invocationsDone() && afterSaveCounter > 0 {
		m.t.Errorf("Expected %d calls to HistoryRepositoryMock.Save at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SaveMock.expectedInvocations), m.SaveMock.expectedInvocationsOrigin, afterSaveCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *HistoryRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockListInspect()

			m.MinimockSaveInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *HistoryRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *HistoryRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockListDone() &&
		m.MinimockSaveDone()
}
