services:
  pvz:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pvz-main
    volumes:
      - .env:/app/.env:ro
      - logs-pvz:/app/logs
    env_file:
      - .env
    environment:
      - KAFKA_BROKERS=kafka:9092
      - DB_WRITE_DSN=postgres://pvz_user:pvz_pass@postgres-master:5432/pvz?sslmode=disable
      - DB_READ_DSN=postgres://pvz_user:pvz_pass@postgres-master:5432/pvz?sslmode=disable
    ports:
      - "50051:50051" # grpc server
      - "50052:50052" # admin grpc server
      - "8080:8080" # http-gateway
      - "8082:8082" # swagger ui
    depends_on:
      kafka:
        condition: service_healthy
      postgres-master:
        condition: service_healthy
    restart: "no"
    healthcheck:
      test: ["CMD-SHELL", "grpc-health-probe -addr=localhost:50051 -connect-timeout=3s"]
      interval: 10s
      timeout: 3s
      retries: 5

  notifier:
    build:
      context: ../notifier
      dockerfile: Dockerfile
    container_name: pvz-event-notifier
    volumes:
      - ../notifier/.env:/app/.env:ro
      - logs-notifier:/app/logs
    env_file:
      - ../notifier/.env
    environment:
      - BROKER_ADDR=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pgrep notifier" ]
      interval: 10s
      timeout: 3s
      retries: 5

  postgres-master:
    build:
      context: ./docker/master
      dockerfile: Dockerfile
    container_name: pvz-db-master
    env_file:
      - .env
    ports:
      - "5433:5432"
    volumes:
      - master_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 5s
      start_period: 10s
      retries: 5

  postgres-slave:
    build:
      context: ./docker/slave
      dockerfile: Dockerfile
    container_name: pvz-db-slave
    env_file:
      - .env
    depends_on:
      - postgres-master
    ports:
      - "5434:5432"
    volumes:
      - slave_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 5s
      start_period: 10s
      retries: 5

  postgres-test:
    image: postgres:15-alpine
    container_name: pvz-db-test
    ports:
      - "5455:5432"
    environment:
      POSTGRES_DB: pvz_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_pass
    volumes:
      - pg_test_data:/var/lib/postgresql/data

  kafka:
    image: confluentinc/cp-kafka:8.0.0
    container_name: pvz-kafka
    ports:
      - "9094:9094"
    volumes:
      - kafka_data:/var/lib/kafka/data
    environment:
      CLUSTER_ID: "Cl4st3r-D6"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_NODE_ID: "1"
      KAFKA_INITIAL_CONTROLLERS: "1@kafka:9093"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_LISTENERS: "INTERNAL://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,EXTERNAL://0.0.0.0:9094"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:9092,EXTERNAL://localhost:9094"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: "1"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      KAFKA_NUM_PARTITIONS: "1"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    entrypoint:
      - bash
      - -c
      - |
        set -e
        if [ ! -f /var/lib/kafka/data/meta.properties ]; then
          echo "formatting storage for KRaft"
          kafka-storage format \
            --config /etc/kafka/server.properties \
            --cluster-id "$CLUSTER_ID" \
            --standalone
        else
          echo "Storage already formatted"
        fi
        echo "Starting Kafka with cluster-id: $CLUSTER_ID"
        exec /etc/confluent/docker/run
    healthcheck:
      test: [ "CMD-SHELL", "kafka-broker-api-versions --bootstrap-server kafka:9092" ]
      interval: 30s
      timeout: 15s
      start_period: 60s
      retries: 5
    restart: unless-stopped

  kafka-init:
    image: confluentinc/cp-kafka:8.0.0
    container_name: kafka-init
    depends_on:
      - kafka
    entrypoint:
      - bash
      - -c
      - |
        echo "waiting for Kafka"
        cub kafka-ready -b kafka:9092 1 60
        echo "creating topic pvz.events-log"
        kafka-topics --bootstrap-server kafka:9092 \
          --create --if-not-exists --topic pvz.events-log \
          --partitions 1 --replication-factor 1
        echo "topic was created successfully"
    restart: "no"

  kafka-ui:
    image: ghcr.io/kafbat/kafka-ui:v1.2.0
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8083:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_NAME: "pvz-cluster"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"
    restart: unless-stopped

  migrator:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pvz-migrator
    depends_on:
      postgres-master:
        condition: service_healthy
    env_file:
      - .env
    entrypoint:
      - sh
      - -c
      - |
        echo "[migrator] Applying DB migrations to \"$DOCKER_MIGRATION_DSN\"" &&
        /usr/local/bin/goose -dir /app/migrations postgres "$DOCKER_MIGRATION_DSN" up &&
        echo "[migrator] Finished successfully"
    restart: "no"

volumes:
  logs-pvz:
  logs-notifier:
  master_data:
  slave_data:
  kafka_data:
  pg_test_data:
